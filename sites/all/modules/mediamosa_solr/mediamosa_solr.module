<?php
/**
 * @file
 * The MediaMosa Solr extension module.
 */

// Include my non-hooks.
module_load_include('inc', 'mediamosa_solr', 'mediamosa_solr');
module_load_include('batch.inc', 'mediamosa_solr', 'mediamosa_solr');

/**
 * Implementation of hook_mediamosa_search_engine_info().
 */
function mediamosa_solr_mediamosa_search_engine_info() {

  // Return the information about the default search engine.
  return array('mediamosa_solr' => array(
    'title' => t('MediaMosa Solr search'),
    'description' => t('The Apache Solr search allows fast metadata search. This module allows MediaMosa to use Solr for its searching.'),
    mediamosa_search::SEARCH_SUPPORT_RELATED => true,
    mediamosa_search::SEARCH_SUPPORT_FACET => true,
    mediamosa_search::SEARCH_SUPPORT_BOOST => true,
  ));
}

/**
 * Implementation of hook_mediamosa_simpletest_clean_environment().
 */
function mediamosa_solr_mediamosa_simpletest_clean_environment() {
  $count = mediamosa_solr::delete_simpletest_documents();

  drupal_set_message(t('Removed @count testing data from Solr database.', array('@count' => $count)));
}

/**
 * Implement hook_menu().
 */
function mediamosa_solr_menu() {
  $items = array();

  $items['admin/mediamosa/config/solr'] = array(
    'title' => 'MediaMosa Solr',
    'description' => 'Apache Solr allows you to use really fast metadata searching for MediaMosa, a lot faster than the default search used on your database.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('mediamosa_solr_settings'),
    'access callback' => mediamosa_permission::CALLBACK_USER_ACCESS,
    'access arguments' => array(mediamosa_permission::ACCESS_CONFIG . '|solr'),
  );

  $items['admin/mediamosa/config/solr/config'] = array(
    'title' => 'Configuration',
    'access callback' => mediamosa_permission::CALLBACK_USER_ACCESS,
    'access arguments' => array(mediamosa_permission::ACCESS_CONFIG . '|solr'),
    'type' => MENU_DEFAULT_LOCAL_TASK,
  );

  $items['admin/mediamosa/config/solr/indexer'] = array(
    'title' => 'Indexer',
    'description' => 'Rebuild or reindex the Solr database.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('_mediamosa_solr_queueer_form'),
    'access callback' => mediamosa_permission::CALLBACK_USER_ACCESS,
    'access arguments' => array(mediamosa_permission::ACCESS_CONFIG . '|solr'),
    'type' => MENU_LOCAL_TASK,
  );

  return $items;
}

/**
 * Implement hook_permission().
 */
function mediamosa_solr_permission() {
  return array(
    mediamosa_permission::ACCESS_CONFIG . '|solr' => array(
      'title' => t('MediaMosa solr configuration administer permissions'),
      'description' => t('Manage the configuration of MediaMosa Solr module.')
    ),
  );
}

/**
 * Implement hook_settings().
 */
function mediamosa_solr_settings() {

  $form = array();
  $form['connection'] = array(
    '#type' => 'fieldset',
    '#title' => t('Server connection setup for Solr'),
    '#description' => t('Supply the server URL and other connecting related settings for Solr.'),
    '#collapsible' => TRUE,
    '#weight' => -5,
  );
  $form['connection']['mediamosa_solr_url'] = array(
    '#type' => 'textfield',
    '#title' => t('URL'),
    '#description' => t('Enter the URL of the Solr server. Example; http://solr.mediamosa.local:8983/mediamosa/ (jetty servlet) or http://solr.mediamosa.local:8080/mediamosa/ (tomcat servlet).  Port and path in the URL are required, if you are using the HTTP port (80) then you must supply it in the url (http://solr.mediamosa.local:80/mediamosa/).'),
    '#required' => TRUE,
    '#default_value' => mediamosa_solr_apache_solr_service::mediamosaGetUrl(),
  );

  if (mediamosa_solr_apache_solr_service::mediamosaGetUrl() != '') {
    $form['connection']['check_connection'] = array(
      '#type' => 'submit',
      '#value' => t('Check connection Solr'),
      '#submit' => array('_mediamosa_solr_ping_submit'),
      '#weight' => 1,
    );
    $form['connection']['mediamosa_solr_check_connection_save'] = array(
      '#type' => 'checkbox',
      '#title' => t('Save URL when connection test was successful.'),
      '#default_value' => !isset($_SESSION['mediamosa_solr_check_connection_save']) ? TRUE : $_SESSION['mediamosa_solr_check_connection_save'],
      '#weight' => 2,
    );
  }

  // No longer needed.
  unset($_SESSION['mediamosa_solr_check_connection_save']);

  $form['#submit'] = array('mediamosa_solr_settings_submit');
  return system_settings_form($form);
}

/**
 * Implement hook_settings_submit().
 */
function mediamosa_solr_settings_submit($form, &$form_state) {

  // Call the function we normally call when pressing the 'check connection
  // Solr' button.
  _mediamosa_solr_ping_submit($form, $form_state);
}

/**
 * Implements hook_cron().
 */
function mediamosa_solr_cron() {

  // Lets not index during simpletest. In simpletest, all calls to Solr are done
  // immediately without queue.
  if (mediamosa::in_simpletest_sandbox()) {
    return;
  }

  try {
    // Start background indexing solr.
    mediamosa_http::do_internal_call_cron('internal/cron/solr', TRUE);
  }
  catch (Exception $e) {
    mediamosa_solr::log('Catch exception during cron: @function: @msg', array('@function' => __FUNCTION__, '@msg' => $e->getMessage()));
  }
}

/**
 * Implements hook_mediamosa_status_collect().
 */
function mediamosa_solr_mediamosa_status_collect($reset = FALSE) {
  $mediamosa_status_server = array();
  if (!$reset) {
    $mediamosa_status_server = variable_get('mediamosa_status_server_' . mediamosa::get_server_id(), array());
  }

  if (empty($mediamosa_status_server)) {
    $mediamosa_status_server = array('time' => REQUEST_TIME, 'statuses' => _mediamosa_solr_status_generate());
    variable_set('mediamosa_status_server_' . mediamosa::get_server_id(), $mediamosa_status_server);
  }

  return $mediamosa_status_server['statuses'];
}

/**
 * Implements hook_mediamosa_status_collect_realtime().
 */
function mediamosa_solr_mediamosa_status_collect_realtime() {
  // Make sure this module is enabled.
  if (!module_exists('mediamosa_maintenance_status')) {
    return array();
  }

  $count = mediamosa_solr::queueGetCount();
  $enabled = variable_get('mediamosa_solr_enable_queue', TRUE);
  $running = !lock_may_be_available(mediamosa_solr::LOCK_NAME_PROCESSING);
  $cron_last = variable_get('mediamosa_solr_queue_cron_last', NULL);
  $failures = variable_get('mediamosa_solr_queue_failures', NULL);
  $failures = $failures ? array(t('Warning: indexer generated an unrecoverable error; ') . check_plain(var_export($failures, TRUE))) : array();
  $stats = variable_get('mediamosa_solr_queue_stats', array());

  $average_stats = 0;
  foreach ($stats as $stat) {
    $average_stats += $stat;
  }

  $queue_message[] = $enabled ? t('Enabled') : t('Queue is disabled (!enable_link)', array('!enable_link' => l('enable here', 'admin/mediamosa/config/global')));

  if ($count) {
    $queue_message[] = !empty($running) ? t('is processing') : t('waiting for next interval');
  }

  $queue_message[] = $count ? format_plural($count, 'one asset queued for indexing', '@count assets queued for indexing') : t('queue is empty');
  $queue_message[] = !$running && (!$average_stats || empty($stats)) ? t('no assets indexed for the last @count runs', array('@count' => mediamosa_solr::TAKE_AVERAGE_LAST_X_MIN)) : t('indexing @stats assets per run', array('@stats' => round($average_stats / count($stats), 2)));

  // Has not run OR has run more than 5 minutes ago last time.
  if ($cron_last < (REQUEST_TIME - (5 *60))) {
    $failures[] = t('Warning: the solr queue has not run for more than 5 minutes.');
  }
  elseif (empty($cron_last)) {
    $failures[] = t('Warning: the solr queue has not run yet.');
  }

  $results = array();
  $results['mediamosa_solr_indexer'] = array(
    'title' => t('Apache Solr indexer'),
    'value' => implode(', ', $queue_message),
    'severity' => _mediamosa_maintenance_status_okerror($enabled && empty($failures)),
    'description' => empty($failures) ? '' : t('The Solr queue reports') . '; ' . implode(' ', $failures),
  );

  $solr_ok = $enabled && variable_get('mediamosa_search_engine') == 'mediamosa_solr';
  $results['mediamosa_solr'] = array(
    'title' => t('Apache Solr'),
    'value' => t('Searching with MediaMosa Solr enabled'),
    'severity' => _mediamosa_maintenance_status_okerror($solr_ok),
    'description' => $solr_ok ? '' : t('Although solr is queue is enabled, you must also select Apache Solr as search engine. You can do it !here.', array('!here' => l(t('here'), 'admin/mediamosa/config/global', array('query' => array('settings_mediamosa' => ''))))),
  );

  // Add under the components section.
  return array(
    'components' => array(
      'title' => t('Components'),
      'results' => $results,
    ),
  );
}

/**
 * Implementation of hook_mediamosa_asset_index_delete().
 *
 * @param array $delete_info
 *  - asset_ids: (array)
 *    The assets to delete.
 */
function mediamosa_solr_mediamosa_asset_index_delete($delete_info) {
  // Delete the asset.
  if (mediamosa_solr::isEnabled()) {
    mediamosa_solr::deleteAssets($delete_info['asset_ids']);
  }
}

/**
 * Implementation of hook_mediamosa_asset_reindex().
 *
 * @param array $reindex_info
 *
 * Keys in array;
 *  - asset_ids: (array)
 *    The assets to reindex.
 */
function mediamosa_solr_mediamosa_asset_reindex($reindex_info, $search_index_type) {
  // Instant is default TRUE.
  $instant = TRUE;

  switch ($search_index_type) {
    case mediamosa_settings::SEARCH_INDEX_TYPE_ASSET_NORMALIZE:
      $instant = mediamosa_solr::settingInstantlyAssetNormalize();
      break;

    case mediamosa_settings::SEARCH_INDEX_TYPE_METADATA:
      $instant = mediamosa_solr::settingInstantlyMetadata();
      break;

    case mediamosa_settings::SEARCH_INDEX_TYPE_ASSET_CREATE:
      $instant = mediamosa_solr::settingInstantlyAssetCreate();
      break;

    case mediamosa_settings::SEARCH_INDEX_TYPE_ASSET_UPDATE:
      $instant = mediamosa_solr::settingInstantlyAssetUpdate();
      break;

    case mediamosa_settings::SEARCH_INDEX_TYPE_ASSET_PLAY_COUNT:
      $instant = mediamosa_solr::settingInstantlyAssetUpdatePlayCount();
      break;

    case mediamosa_settings::SEARCH_INDEX_TYPE_ASSET_VIEW_COUNT:
      $instant = mediamosa_solr::settingInstantlyAssetUpdateViewCount();
      break;

    case mediamosa_settings::SEARCH_INDEX_TYPE_MEDIAFILE_UPDATE:
      $instant = mediamosa_solr::settingInstantlyMediafileUpdate();
      break;

    case mediamosa_settings::SEARCH_INDEX_TYPE_FAV_USER:
      $instant = mediamosa_solr::settingInstantlyUserFav();
      break;

    case mediamosa_settings::SEARCH_INDEX_TYPE_MASTER_SLAVE:
      $instant = mediamosa_solr::settingInstantlyMasterSlave();
      break;

    case mediamosa_settings::SEARCH_INDEX_TYPE_ACL:
      $instant = mediamosa_solr::settingInstantlyACL();
      break;

    case mediamosa_settings::SEARCH_INDEX_TYPE_ASSET_COLLECTION:
      $instant = mediamosa_solr::settingInstantlyAssetCollection();
      break;
  }

  // When off, queue the index for later.
  if (!mediamosa_solr::isEnabled()) {
    $instant = FALSE;
  }

  if ($instant) {
    mediamosa_solr::insertDelayedAssets($reindex_info['asset_ids']);
  }
  else {
    mediamosa_solr::queueAssets($reindex_info['asset_ids']);
  }
}

/**
 * Implements hook_mediamosa_asset_queue().
 */
function mediamosa_solr_mediamosa_asset_queue($reindex_info) {
  mediamosa_solr::queueAssets($reindex_info['asset_ids']);
}

/**
 * Implements hook_mediamosa_register_rest_call().
 */
function mediamosa_solr_mediamosa_register_rest_call() {

  $rest_calls = array();

  // Trigger for cron run.
  $rest_calls['cron/solr'][mediamosa_rest_call::METHOD_GET] = array(
    mediamosa_rest_call::CLASS_NAME => 'mediamosa_rest_call_solr_process_queue',
    mediamosa_rest_call::STATUS => mediamosa_rest_call::STATUS_ACTIVE,
    mediamosa_rest_call::MODULE_NAME => 'mediamosa_solr',
    mediamosa_rest_call::ACCESS => mediamosa_rest_call::ACCESS_INTERNAL_ONLY,
    mediamosa_rest_call::VERSION => mediamosa_version::MEDIAMOSA_VERSION_2_3_0,
    mediamosa_rest_call::NO_USER_ABORT => TRUE,
  );

  return $rest_calls;
}

/**
 * Show form for indexer.
 */
function _mediamosa_solr_queueer_form() {

  $form = array();
  $form['rebuild'] = array(
    '#type' => 'fieldset',
    '#title' => t('Rebuild'),
    '#description' => t('Rebuilding the index of Solr will either replace or update the index. This form will only start and fill the re-index queue. The re-index will take time depending on the size of your database and will run in the background. Progress of the re-index can be followed on the !statuspage.', array('!statuspage' => l(t('MediaMosa status home page'), 'admin/mediamosa'))),
    '#collapsible' => TRUE,
    '#weight' => -5,
  );

  $form['rebuild']['rebuild_index'] = array(
    '#type' => 'submit',
    '#value' => t('Rebuild index Solr'),
    '#weight' => 1,
  );

  $form['rebuild']['purge_solr'] = array(
    '#type' => 'checkbox',
    '#title' => t('Completely rebuild the Solr index.'),
    '#default_value' => FALSE,
    '#description' => t('This will purge the Solr database from all its data. With this option enabled, current search calls will not render the correct results until rebuild is complete. Best to switch back first to default search engine before proceding. You only need this option when the search is returning assets that no longer exist in the MediaMosa database. Although, MediaMosa will only return existing assets, but will return less assets than might be expected.'),
    '#weight' => 2,
  );

  return $form;
}

/**
 * Implement hook_form_submit().
 */
function _mediamosa_solr_queueer_form_submit($form, &$form_state) {

  switch ($form_state['values']['op']) {
    case t('Rebuild index Solr'):
      _mediamosa_solr_batch_reindex_start((int) $form_state['values']['purge_solr']);
      break;
  }
}

/**
 * Implements hook_mediamosa_settings_collect().
 */
function mediamosa_solr_mediamosa_configuration_collect() {
  $form = array();
  $form['mediamosa_solr'] = array(
    '#type' => 'fieldset',
    '#title' => t('Apache Solr settings'),
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
  );
  $form['mediamosa_solr']['mediamosa_solr_enable_queue'] = array(
    '#type' => 'checkbox',
    '#title' => t('Enable queue processing'),
    '#description' => t('Turns off indexing of assets to the Solr search engine using the queue.'),
    '#default_value' => variable_get('mediamosa_solr_enable_queue', TRUE),
  );

  $form['mediamosa_solr']['queue'] = array(
    '#type' => 'fieldset',
    '#title' => t('Apache Solr indexing settings'),
    '#description' => t('These options allow you specify on type if you want queue the changes to asset or let Solr update its search index instantly. By default all options are enabled, having all changes processed instantly. However, if you feel that Solr is slowing down because it got to much to index, then turn one or more options off to queue changes. Disabling instant indexing will delay the update on your search changes. This delay is depending on the number of asset changes Solr can process and how many update calls are made to Solr. The delay is mostly up to 1 or 2 minutes before its processed by Solr. These settings only effect Solr indexing.'),
    '#collapsible' => FALSE,
  );

  $form['mediamosa_solr']['queue']['mediamosa_solr_metadata_instantly'] = array(
    '#type' => 'checkbox',
    '#title' => t('Process metadata changes instantly'),
    '#default_value' => mediamosa_solr::settingInstantlyMetadata(),
  );

  $form['mediamosa_solr']['queue']['mediamosa_solr_asset_create_instantly'] = array(
    '#type' => 'checkbox',
    '#title' => t('Process asset create instantly'),
    '#default_value' => mediamosa_solr::settingInstantlyAssetCreate(),
  );

  $form['mediamosa_solr']['queue']['mediamosa_solr_asset_update_instantly'] = array(
    '#type' => 'checkbox',
    '#title' => t('Process asset updates instantly'),
    '#default_value' => mediamosa_solr::settingInstantlyAssetUpdate(),
  );

  $form['mediamosa_solr']['queue']['mediamosa_solr_asset_update_viewcount_instantly'] = array(
    '#type' => 'checkbox',
    '#title' => t('Process asset view counts instantly'),
    '#default_value' => mediamosa_solr::settingInstantlyAssetUpdateViewCount(),
  );

  $form['mediamosa_solr']['queue']['mediamosa_solr_asset_update_playcount_instantly'] = array(
    '#type' => 'checkbox',
    '#title' => t('Process asset play counts instantly'),
    '#default_value' => mediamosa_solr::settingInstantlyAssetUpdatePlayCount(),
  );

  $form['mediamosa_solr']['queue']['mediamosa_solr_assetcollection_instantly'] = array(
    '#type' => 'checkbox',
    '#title' => t('Process asset in/with collection relations instantly'),
    '#default_value' => mediamosa_solr::settingInstantlyAssetCollection(),
  );

  $form['mediamosa_solr']['queue']['mediamosa_solr_mediafile_update_instantly'] = array(
    '#type' => 'checkbox',
    '#title' => t('Process mediafiles updates instantly'),
    '#default_value' => mediamosa_solr::settingInstantlyMediafileUpdate(),
  );

  $form['mediamosa_solr']['queue']['mediamosa_solr_user_fav_instantly'] = array(
    '#type' => 'checkbox',
    '#title' => t('Process user favorites of assets instantly'),
    '#default_value' => mediamosa_solr::settingInstantlyUserFav(),
  );

  $form['mediamosa_solr']['queue']['mediamosa_solr_master_slave_instantly'] = array(
    '#type' => 'checkbox',
    '#title' => t('Process master/slave changes of assets instantly'),
    '#default_value' => mediamosa_solr::settingInstantlyMasterSlave(),
  );

  $form['mediamosa_solr']['queue']['mediamosa_solr_acl_instantly'] = array(
    '#type' => 'checkbox',
    '#title' => t('Process access (ACL/AUT) changes of assets instantly'),
    '#default_value' => mediamosa_solr::settingInstantlyACL(),
  );

  $form['mediamosa_solr']['mediamosa_solr_optimize'] = array(
    '#type' => 'textfield',
    '#title' => t('Optimize timeout'),
    '#description' => t('The number of seconds before a optimize is run on Solr. Set to 0 for off. Solr is fully capable of optimizing itself, no need to set this value.'),
    '#default_value' => mediamosa_solr::settingsOptimize(),
  );

  return $form;
}

/**
 * Implementation of hook_mediamosa_rest_process_call_post().
 *
 * @param mediamosa_rest_call $mediamosa_rest_call
 *   The mediamosa_rest_call that called to POST hook.
 */
function mediamosa_solr_mediamosa_rest_process_call_post($mediamosa_rest_call) {
  $delayed_assets = &drupal_static('mediamosa_solr_delayed_asset_ids', array());

  if (!empty($delayed_assets)) {
    mediamosa_solr::insertAssets($delayed_assets);
  }
}
