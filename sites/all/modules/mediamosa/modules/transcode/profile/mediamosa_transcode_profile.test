<?php
/**
 * @file
 * Job tests for transcode jobs.
 */

class MediaMosaTranscodeProfileTestCaseEga extends MediaMosaTestCaseEgaJob {

  protected $unit_test_prefix;
  // ------------------------------------------------------------------ Members.
  // ---------------------------------------------------------------- Functions.
  /**
   * Implement getInfo().
   */
  public static function getInfo() {
    return array(
      'name' => 'JOB - transcode profile test',
      'description' => 'Testing the transcoding profile jobs.',
      'group' => MEDIAMOSA_TEST_GROUP_MEDIAMOSA_CORE_JOB,
      mediamosa_settings::MEDIAMOSA_RUN => mediamosa_settings::MEDIAMOSA_RUN_15_MINUTES,
    );
  }

  function setUp()
  {
    // Get from outside sandbox.
    $mediamosa_jobscheduler_uri = variable_get('mediamosa_jobscheduler_uri', NULL);

    // Run parent first so we are inside sandbox.
    // Call parent::setUp and preserve arguments.
    $args = func_get_args();

    // Create and setup the CORE module.
    $args = array_unique(array_merge(array('mediamosa_messenger'), $args));
    if (drupal_substr(phpversion(), 0, 3) < '5.3') {
      call_user_func_array(array($this, 'parent::setUp'), $args);
    }
    else {
      call_user_func_array('parent::setUp', $args);
    }

    // Set jobserver selection.
    if (!empty($mediamosa_jobscheduler_uri)) {
      variable_set('mediamosa_jobscheduler_uri', $mediamosa_jobscheduler_uri);
    }
//    parent::setUp();
    $this->unit_test_prefix = $GLOBALS['drupal_test_info']['test_run_id'];
    variable_set('mediamosa_scheduler_username', 'admin');
    variable_set('mediamosa_scheduler_password', 'admin');

    $this->start_jobcores();
    sleep(10);
    //$this->wait_jobcores_online();
  }

  // -------------------------------------------------------------------- Tests.

  /**
   * Make sure no empty ghost job is created when transcode is broken.
   */
  public function testJobTranscodeBroken() {
    // Create upload file.
    $upload = $this->uploadTestFile();
    $asset_id = $upload['asset_id'];
    $mediafile_id = $upload['mediafile_id'];

    $default_profiles = array(
      array(
        'Test profile',
        'TRUE',
        'ffmpeg',
        'ogv',
        array(
          'audiocodec' => 'libvorbis',
          'audiobitrate' => '128000',
          'audiosamplingrate' => '44100',
          'audiochannels' => '2',
          'videocodec' => 'libtheora',
          'videobitrate' => '1000000',
          'fps' => 'ff',
          'size' => '640x360',
          'aspect' => '16:9',
        ),
      ),
    );

    // Create new transcode profiles.
    foreach ($default_profiles as $default_profile) {
      $node = mediamosa_node::create_basic_node(mediamosa_node::MEDIAMOSA_NODE_TYPE_TRANSCODE_PROFILE, $default_profile[0]);
      $node->{mediamosa_transcode_profile_db::APP_ID} = 0;
      $node->{mediamosa_transcode_profile_db::VERSION} = 0;
      $node->{mediamosa_transcode_profile_db::PROFILE} = $default_profile[0];
      $node->{mediamosa_transcode_profile_db::IS_DEFAULT_PROFILE} = $default_profile[1];
      $node->{mediamosa_transcode_profile_db::TOOL} = $default_profile[2];
      $node->{mediamosa_transcode_profile_db::FILE_EXTENSION} = $default_profile[3];
      $node->{mediamosa_transcode_profile_db::COMMAND} = mediamosa_transcode_profile::arrayToCommand($default_profile[4]);

      if ($node->{mediamosa_transcode_profile_db::IS_DEFAULT_PROFILE} == mediamosa_transcode_profile_db::IS_DEFAULT_PROFILE_TRUE) {
        // Clear others, so mine will become default.
        _mediamosa_transcode_profile_update_isdefault($node);
      }

      node_save($node);
    }

    // Get the asset.
    $asset = $this->getAsset($asset_id);
    $this->var_export($asset);

    // Create transcode job.
//    $this->createMediafileTranscode($mediafile_id, array(), array(mediamosa_error::ERRORCODE_JOB_TRANSCODE_PARAMETER_NOT_FLOAT));
    $job_id = $this->createMediafileTranscode($mediafile_id, array(), array(mediamosa_error::ERRORCODE_JOB_TRANSCODE_PARAMETER_NOT_FLOAT));
    $job_type = mediamosa_job_db::JOB_TYPE_TRANSCODE;

    // ###########################################
    $this->var_export('$job_id:');
    $this->var_export($job_id); // /scheduler/job_start
    // ###########################################

//    $query_data = [
//      "job_id" => (string)$job_id['job_id'],
//      "job_type" => $this->unit_test_prefix . '_' . $job_type,
//      "asset_id" => $asset_id,
//      "mediafile_id" => $mediafile_id,
//    ];
//    //$location = '/scheduler/start_job?' . http_build_query($query_data);
//    $location = 'scheduler/start_job';
//    $this->restCallGet($location, $query_data);
//
//    $this->cycle($query_data[mediamosa_job_db::ID]);

    // Parse the queue.
//    $this->doQueueCycleAll();

    // Get the asset.
    $asset = $this->getAsset($asset_id);
    $this->var_export($asset);
  }
}
