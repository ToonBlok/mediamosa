<?php
/**
 * @file
 * Job tests for transcode jobs.
 */

class MediaMosaJobTranscodeTestCaseEga extends MediaMosaTestCaseEgaJob {
  // ------------------------------------------------------------------ Members.
  // ---------------------------------------------------------------- Functions.
  /**
   * Implement getInfo().
   */
  public static function getInfo() {
    return array(
      'name' => 'JOB - transcode test',
      'description' => 'Testing the transcoding jobs.',
      'group' => MEDIAMOSA_TEST_GROUP_MEDIAMOSA_CORE_JOB,
      mediamosa_settings::MEDIAMOSA_RUN => mediamosa_settings::MEDIAMOSA_RUN_15_MINUTES,
    );
  }


  // -------------------------------------------------------------------- Tests.
  /**
   * Basic job transcode test.
   */
  /**
   * Basic job transcode test.
   */
  public function testJobTranscode() {

    // Create upload file.
    $upload = $this->uploadTestFile(array('filename' => $this->getTestVideo_wmv()));
    $asset_id = $upload['asset_id'];
    $mediafile_id = $upload['mediafile_id'];

    // Create transcode job.
    $job_id = $this->createMediafileTranscode($mediafile_id, array('profile_id' => $this->getDefaultTranscodeProfile()));
    $job_type = mediamosa_job_db::JOB_TYPE_TRANSCODE;

    // ###########################################
    $foo = '$job_id (array??)';
    $this->var_export($foo);
    $this->var_export($job_id); // /scheduler/job_start
    // ###########################################

    // Parse the queue.
//    $this->doQueueCycleAll();

    // REST call to scheduler
    // Heb nu $job_id, $job_type, $mediafile_id
    $query_data = [
      "job_id" => (int)$job_id,
      "job_type" => $job_type,
      "mediafile_id" => $mediafile_id,
      "asset_id" => $asset_id
    ];
    //$location = '/scheduler/start_job?' . http_build_query($query_data);
    $location = 'scheduler/start_job';
    $this->restCallGet($location, $query_data);

    // this is not sufficient
    sleep(5);
    // Get the asset.
    $asset = $this->getAsset($asset_id);
    $this->var_export($asset);

    // Add mediafile clean up and get the first transcoded mediafile.
    $mediafile_id_transcoded = NULL;
    foreach ($asset['mediafiles'] as $mediafile) {
      if (isset($mediafile[0])) {
        foreach ($mediafile as $mediafile_child) {
          $this->addToCleanUp($mediafile_child['mediafile_id']);

          if (!$mediafile_id_transcoded && $mediafile_child['mediafile_id'] != $mediafile_id) {
            $mediafile_id_transcoded = $mediafile_child['mediafile_id'];
          }
        }
      }
      else {
        $this->addToCleanUp($mediafile['mediafile_id']);
      }
    }

    // Make a retranscode job.
    //
    // Get the transcoded mediafile_id.
    $mediafile_id_transcoded = NULL;
    foreach ($asset['mediafiles'] as $mediafile) {
      if (isset($mediafile[0])) {
        foreach ($mediafile as $mediafile_child) {
          if ($mediafile_child['mediafile_id'] != $mediafile_id) {
            $mediafile_id_transcoded = $mediafile_child['mediafile_id'];
            break;
          }
        }
      }
    }
    $this->assertTrue($mediafile_id_transcoded, 'Found transcoded mediafile');

//    if ($mediafile_id_transcoded) {
//      $mediamosa_uri = mediamosa_storage::get_uri_mediafile($mediafile_id_transcoded);
//
//      // Delete the transcoded file.
//      mediamosa_io::unlink($mediamosa_uri);
//
//      // Create transcode job.
//      $job_id = $this->createMediafileRetranscode($mediafile_id_transcoded, array('profile_id' => $this->getDefaultTranscodeProfile()));
//
//      // Parse the queue.
//      $this->doQueueCycleAll();
//
//      $this->assertTrue(
//        mediamosa_io::is_file($mediamosa_uri),
//        strtr("The mediafile was successfuly retranscoded: @filename", array('@filename' => mediamosa_io::realpath_safe($mediamosa_uri)))
//      );
//    }
//    else {
//      $this->fail('Expected to find transcoded file!');
//    }
  }


  /**
   * Basic job transcode test.
   */
//  public function testJobTranscodeExtended() {
//    // Create upload file.
//    $upload = $this->uploadTestFile();
//    $asset_id = $upload['asset_id'];
//    $mediafile_id = $upload['mediafile_id'];
//
//    $default_profiles = array(
//      array(
//        'Test profile',
//        'TRUE',
//        'ffmpeg',
//        'ogv',
//        array(
//          'audiocodec' => 'libvorbis',
//          'audiobitrate' => '128000',
//          'audiosamplingrate' => '44100',
//          'audiochannels' => '2',
//          'videocodec' => 'libtheora',
//          'videobitrate' => '1000000',
//          'fps' => '30',
//          'size' => '640x360',
//          'aspect' => '16:9',
//        ),
//      ),
//    );
//
//    // Create new transcode profiles.
//    foreach ($default_profiles as $default_profile) {
//      $node = mediamosa_node::create_basic_node(mediamosa_node::MEDIAMOSA_NODE_TYPE_TRANSCODE_PROFILE, $default_profile[0]);
//      $node->{mediamosa_transcode_profile_db::APP_ID} = 0;
//      $node->{mediamosa_transcode_profile_db::VERSION} = 0;
//      $node->{mediamosa_transcode_profile_db::PROFILE} = $default_profile[0];
//      $node->{mediamosa_transcode_profile_db::IS_DEFAULT_PROFILE} = $default_profile[1];
//      $node->{mediamosa_transcode_profile_db::TOOL} = $default_profile[2];
//      $node->{mediamosa_transcode_profile_db::FILE_EXTENSION} = $default_profile[3];
//      $node->{mediamosa_transcode_profile_db::COMMAND} = mediamosa_transcode_profile::arrayToCommand($default_profile[4]);
//
//      if ($node->{mediamosa_transcode_profile_db::IS_DEFAULT_PROFILE} == mediamosa_transcode_profile_db::IS_DEFAULT_PROFILE_TRUE) {
//        // Clear others, so mine will become default.
//        _mediamosa_transcode_profile_update_isdefault($node);
//      }
//
//      node_save($node);
//    }
//
//    // Get the asset.
//    $asset = $this->getAsset($asset_id);
//    $this->var_export($asset);
//
//    // Create transcode job.
//    $this->createMediafileTranscode($mediafile_id);
//
//    // Parse the queue.
//    $this->doQueueCycleAll();
//
//    // Get the asset.
//    $asset = $this->getAsset($asset_id);
//    $this->var_export($asset);
//
//    // Might be swapped in results, so check what is the transcode.
//    if ($asset['mediafiles']['mediafile'][0]['is_original_file'] == 'TRUE') {
//      $metadata = $asset['mediafiles']['mediafile'][1]['metadata'];
//    }
//    else {
//      $metadata = $asset['mediafiles']['mediafile'][0]['metadata'];
//    }
//
//    // Must be converted to '640x360'.
//    $this->assertTrue($metadata['width'] == 640, 'New transcoding is 640 wide.');
//    $this->assertTrue($metadata['height'] == 360, 'New transcoding is 360 high.');
//
//    // Clean up.
//    $this->addMediafilesToCleanUp($asset['mediafiles']);
//  }
}
