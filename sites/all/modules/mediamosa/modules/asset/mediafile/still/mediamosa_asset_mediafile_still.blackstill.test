<?php
/**
 * @file
 * Black still check.
 */

class MediaMosaStillBlackStillTestCaseEgaJob extends MediaMosaTestCaseEgaJob {

  /**
   * Implements getInfo().
   */
  public static function getInfo() {
    return array(
      'name' => 'Still - Black-still detection',
      'description' => 'Test the black still detection.',
      'group' => MEDIAMOSA_TEST_GROUP_MEDIAMOSA_CORE_STILL,
    );
  }


  /**
   * Do a black still detection test.
   */
  public function testBlackStill() {

    // Set up still video.
    $upload = $this->uploadTestFile(array('filename' => $this->getTestVideo_BlackStill()));
    $asset_id = $upload['asset_id'];
    $mediafile_id = $upload['mediafile_id'];

    $parameters = array(
      'still_type' => 'NONE',
    );


//    // Parse the queue.
//    $this->doQueueCycleAll();
//
//    // Get the stills.
    $stills = $this->getMediafileStill($mediafile_id);

    // Create still job.
    $job_id = $this->createMediafileStill($mediafile_id, $parameters);
    $job_type = mediamosa_job_db::JOB_TYPE_STILL;

    $query_data = [
      "job_id" => (string)$job_id['job_id'],
      "job_type" => $this->unit_test_prefix . '_' . $job_type,
      "asset_id" => $asset_id,
      "mediafile_id" => $mediafile_id,
    ];

    $location = 'scheduler/start_job';
    $this->restCallGet($location, $query_data);

    $this->cycle($query_data[mediamosa_job_db::ID]);

    // Dump the still data.
    $this->var_export($stills);

    // Check the output.
    $this->assertTrue(count($stills) == 1, 'One dimension result.');

    // Get first array.
    $stills = $stills[0];

    // Still list.
    $still_list = $stills['stills'];

    // Get the created still.
    $still_uri = mediamosa_storage::get_uri_mediafile($still_list['still_id']);

    // Check filename.
    $this->assertTrue($still_uri, strtr('Got generated still filename: @uri (@path)', array('@uri' => $still_uri, '@path' => mediamosa_io::realpath_safe($still_uri))));
    $this->assertTrue(mediamosa_io::file_exists($still_uri), t('Found the generated still.'));

    // Check the image.
    $im = mediamosa_gd::imagecreatefromjpeg(mediamosa_io::realpath($still_uri));

    // Check generation.
    $this->assertTrue($im !== FALSE, 'Got image from still.');

    if ($im) {
      $pixel_rgb = mediamosa_gd::imagecolorat($im, 10, 10);

      //$this->assertTrue($pixel_rgb > 0, 'Check the validated image pixel x10, y10; RGB 0x' . $pixel_rgb);

      $pixel_rgb = mediamosa_gd::imagecolorat($im, 20, 20);

      //$this->assertTrue($pixel_rgb > 0, 'Check the validated image pixel x20, y20; RGB 0x' . $pixel_rgb);
    }

    // Delete still.
    $this->deleteStill($asset_id);
  }
}
