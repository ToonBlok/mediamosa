<?php
/**
 * @file
 * Black still check.
 */

class MediaMosaStillBlackStillTestCaseEgaJob extends MediaMosaTestCaseEgaJob {

  /**
   * Implements getInfo().
   */
  public static function getInfo() {
    return array(
      'name' => 'Still - Black-still detection',
      'description' => 'Test the black still detection.',
      'group' => MEDIAMOSA_TEST_GROUP_MEDIAMOSA_CORE_STILL,
    );
  }

  function setUp() {
    // Get from outside sandbox.
    $mediamosa_jobscheduler_uri = variable_get('mediamosa_jobscheduler_uri', NULL);

    // Run parent first so we are inside sandbox.
    // Call parent::setUp and preserve arguments.
    $args = func_get_args();

    // Create and setup the CORE module.
    $args = array_unique(array_merge(array('mediamosa_messenger'), $args));
    if (drupal_substr(phpversion(), 0, 3) < '5.3') {
      call_user_func_array(array($this, 'parent::setUp'), $args);
    }
    else {
      call_user_func_array('parent::setUp', $args);
    }

    // Set jobserver selection.
    if (!empty($mediamosa_jobscheduler_uri)) {
      variable_set('mediamosa_jobscheduler_uri', $mediamosa_jobscheduler_uri);
    }

    $this->core_types = [
      ['TRANSCODE'],
      ['SCHEDULER'],
      ['STILL'],
    ];
    $this->start_jobcores($this->core_types);
//    sleep(10);
    $servers_are_online = $this->wait_jobcores_online($this->core_types);
    $this->assert($servers_are_online, 'Servers required for unit tests are online');
  }


  /**
   * Do a black still detection test.
   */
 public function testBlackStill() {

    // Set up still video.
    $upload = $this->uploadTestFile(array('filename' => $this->getTestVideo_BlackStill()));
    $asset_id = $upload['asset_id'];
    $mediafile_id = $upload['mediafile_id'];

    $parameters = array(
      'still_type' => 'NONE',
    );

    // Create still job.
    $this->createMediafileStill($mediafile_id, $parameters);

    // Parse the queue.
    $this->doQueueCycleAll(FALSE, FALSE);

    // Get the stills.
    $stills = $this->getMediafileStill($mediafile_id);

    // Dump the still data.
    $this->var_export($stills);

    // Check the output.
    $this->assertTrue(count($stills) == 1, 'One dimension result.');

    // Get first array.
    $stills = $stills[0];

    // Still list.
    $still_list = $stills['stills'];

    // Get the created still.
    $still_uri = mediamosa_storage::get_uri_mediafile($still_list['still_id']);

    // Check filename.
    $this->assertTrue($still_uri, strtr('Got generated still filename: @uri (@path)', array('@uri' => $still_uri, '@path' => mediamosa_io::realpath_safe($still_uri))));
    $this->assertTrue(mediamosa_io::file_exists($still_uri), t('Found the generated still.'));

    // Check the image.
    $im = mediamosa_gd::imagecreatefromjpeg(mediamosa_io::realpath($still_uri));

    // Check generation.
    $this->assertTrue($im !== FALSE, 'Got image from still.');

    if ($im) {
        $pixel_rgb = mediamosa_gd::imagecolorat($im, 10, 10);

        //$this->till - Creation tesassertTrue($pixel_rgb > 0, 'Check the validated image pixel x10, y10; RGB 0x' . $pixel_rgb);

        $pixel_rgb = mediamosa_gd::imagecolorat($im, 20, 20);

        //$this->assertTrue($pixel_rgb > 0, 'Check the validated image pixel x20, y20; RGB 0x' . $pixel_rgb);
    }

    // Delete still.
    $this->deleteStill($asset_id);
  }
}
