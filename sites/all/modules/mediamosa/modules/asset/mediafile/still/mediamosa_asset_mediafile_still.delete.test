<?php
/**
 * @file
 * Delete still unittests.
 *
 * Based on tickets mediamosa 1:
 * ticket_306
 */

class MediaMosaStillDeleteTestCaseEgaJob extends MediaMosaTestCaseEgaJob {

  // ------------------------------------------------------------------ Members.

  // ------------------------------------------------------------------ Functions.
  public static function getInfo() {
    return array(
      'name' => 'Still - Stills delete',
      'description' => 'Delete calls on the stills.',
      'group' => MEDIAMOSA_TEST_GROUP_MEDIAMOSA_CORE_STILL,
    );
  }

  function setUp()
  {
    // Get from outside sandbox.
    $mediamosa_jobscheduler_uri = variable_get('mediamosa_jobscheduler_uri', NULL);

    // Run parent first so we are inside sandbox.
    // Call parent::setUp and preserve arguments.
    $args = func_get_args();

    // Create and setup the CORE module.
    $args = array_unique(array_merge(array('mediamosa_messenger'), $args));
    if (drupal_substr(phpversion(), 0, 3) < '5.3') {
      call_user_func_array(array($this, 'parent::setUp'), $args);
    }
    else {
      call_user_func_array('parent::setUp', $args);
    }

    // Set jobserver selection.
    if (!empty($mediamosa_jobscheduler_uri)) {
      variable_set('mediamosa_jobscheduler_uri', $mediamosa_jobscheduler_uri);
    }

    $this->core_types = [
      ['SCHEDULER'],
      ['TRANSCODE'],
      ['STILL'],
    ];

    $this->start_jobcores($this->core_types);
    $servers_are_online = $this->wait_jobcores_online($this->core_types);
    $this->var_export($this->core_types, 'Server setup');
    $this->assert($servers_are_online, 'Servers required for unit tests are online');
  }

  // ------------------------------------------------------------------ Tests.
  public function testStillDelete() {

    //
    // Set up Egas.
    //

    // App ids.
    $app_id_1 = $this->a_app[mediamosa_app_db::APP_ID];
    $app_id_2 = $this->a_app_2[mediamosa_app_db::APP_ID];
    $app_id_3 = $this->a_app_3[mediamosa_app_db::APP_ID];

    // Login in on other EGA.
    $this->doEgaLogin_2();
    $this->doEgaLogin_3();

    //
    // Set up still.
    //

    // Create upload file.
    $a_upload = $this->uploadTestFile();
    $asset_id = $a_upload['asset_id'];
    $mediafile_id = $a_upload['mediafile_id'];

    // Create still job.
    $job_id = $this->createMediafileStill($mediafile_id);

    // Parse the queue.
    $this->doQueueCycleAll(FALSE, FALSE);

    // Get the stills.
    $a_stills = $this->getMediafileStill($mediafile_id);

    // Check the output
    $this->assertTrue(count($a_stills) == 1, 'One dimension result.');

    // Get first array.
    $a_stills = $a_stills[0];

    // Still list.
    $a_still_list = $a_stills['stills'];

    //
    // Delete still.
    //

    // Delete still with an another user (with still_id).
    $a_parameters = array(
      mediamosa_rest_call_asset_supplement_update::USER_ID => 'santaclaus',
      mediamosa_rest_call_delete_stills::STILL_ID => $a_still_list['still_id'],
    );
    $response = $this->deleteStill($asset_id, $a_parameters, array(mediamosa_error::ERRORCODE_NOT_AUTHORIZED));

    // Delete still with an another user (without still_id).
    $a_parameters = array(
      mediamosa_rest_call_asset_supplement_update::USER_ID => 'santaclaus',
    );
    $response = $this->deleteStill($asset_id, $a_parameters, array(mediamosa_error::ERRORCODE_NOT_AUTHORIZED));

    // Delete still with an another Ega.
    // Switch Ega.
    $this->toEga_3();
    $a_parameters = array(
      mediamosa_rest_call_delete_stills::STILL_ID => $a_still_list['still_id'],
    );
    $response = $this->deleteStill($asset_id, $a_parameters, array(mediamosa_error::ERRORCODE_NOT_AUTHORIZED));
    // Switch Ega.
    $this->toEga_1();

    // Delete still.
    $response = $this->deleteStill($asset_id);
  }
}
