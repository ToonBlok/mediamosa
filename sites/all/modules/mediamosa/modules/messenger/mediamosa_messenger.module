<?php

// Alles hier moet met een underscore beginnen

/**
 * Implements hook_cron().
 */
function mediamosa_messenger_cron() {
  mediamosa_messenger_call_guardian();
  mediamosa_job_scheduler::parse_queue();
}

/**
 * Implements hook_menu(). or does it?
 */
function _mediamosa_messenger_cron()
{
  mediamosa_debug::log('SUCCESS', array(), 'T - MISC');
//  mediamosa_messenger_call_guardian();
}

function mediamosa_messenger_call_guardian(){
  $installation_id = variable_get('mediamosa_installation_id');
  $core_types = variable_get('mediamosa_cores');
  mediamosa_debug::log('Cores: ' . count($core_types), array(), 'T - MISC');

  for ($i = 0; $i < count($core_types); $i++) {
    $core_type = $core_types[$i][0]; // HAS TO BE 0 for now because for now only 1 task
    mediamosa_debug::log('Core_type: ' . $core_type, array(), 'T - MISC');

    $query_data = [
      mediamosa_scheduler_start::QUEUE => $core_type,
      mediamosa_scheduler_start::QUEUE_KEEPALIVE_SERVER => $core_type . '_' . $installation_id . '_' . $i, // The scheduler needs this to know what to listen to for keepalive message
      mediamosa_scheduler_start::CORE_TYPE => $core_type,
    ];

    mediamosa_debug::log('Query data prepared for core: ' . serialize($query_data), array(), 'T - MISC');

    $uri = '/guardian/check?' . http_build_query($query_data);

    mediamosa_messenger_call($uri);
  }
}

function mediamosa_messenger_call($uri, array $query_data = array()) {
  $mediamosa_jobscheduler_uri = variable_get('mediamosa_jobscheduler_uri', NULL);

  if (isset($mediamosa_jobscheduler_uri)) {
    $uri = $uri . http_build_query($query_data);
    $url = mediamosa_http::uri2url($mediamosa_jobscheduler_uri) . $uri;

    mediamosa_http::do_head_internal_call($url);

    mediamosa_debug::log('Did REST call to: ' . $url, array(), 'T - REST');
  } else {
    mediamosa_job_scheduler::log('Jobscheduler URL not set, please setup jobscheduler server in the @link.', array('@link' => l(t('MediaMosa configuration'), 'admin/mediamosa/config/global')), WATCHDOG_ALERT, 'job_cron');
  }
}

function mediamosa_messenger_check_transcode_timeout() {

  $result = mediamosa_db::db_query(
    'SELECT mj.#job_id, mj.#asset_id, mj.#mediafile_id, ms.#uri FROM {#mediamosa_job} AS mj
        JOIN {#mediamosa_server_job} AS msj ON msj.#job_id = mj.#job_id
        JOIN {#mediamosa_server} AS ms ON ms.#nid = msj.#server_id
        WHERE NOT mj.#started IS NULL AND TIME_TO_SEC(TIMEDIFF(utc_timestamp(), mj.#started)) > :JOB_TRANSCODE_TIMEOUT AND #server_type = :server_type_job_processor',
    array(
      '#job_id' => mediamosa_job_db::ID,
      '#asset_id' => mediamosa_job_db::ASSET_ID,
      '#mediafile_id' => mediamosa_job_db::MEDIAFILE_ID,
      '#uri' => mediamosa_server_db::SERVER_URI,
      ':JOB_TRANSCODE_TIMEOUT' => mediamosa_settings::JOB_TRANSCODE_TIMEOUT,
      '#mediamosa_job' => mediamosa_job_db::TABLE_NAME,
      '#mediamosa_server_job' => mediamosa_server_job_db::TABLE_NAME,
      '#mediamosa_server' => mediamosa_server_db::TABLE_NAME,
      '#nid' => mediamosa_server_db::NID,
      '#server_id' => mediamosa_server_job_db::SERVER_ID,
      '#server_type' => mediamosa_server_db::SERVER_TYPE,
      ':server_type_job_processor' => mediamosa_server_db::SERVER_TYPE_JOB_PROCESSOR,
      '#started' => mediamosa_job_db::STARTED,
    )
  );

  foreach ($result as $result_row) {
    // Delete the job from the server job table.
    mediamosa_server_job::delete_by_jobid($result_row[mediamosa_job_db::ID]);

    // Update the status of the job.
    $error_message = mediamosa_error::error_code_find_description(mediamosa_error::ERRORCODE_JOB_TRANSCODE_TIMEOUT, array('@timeout' => mediamosa_settings::JOB_TRANSCODE_TIMEOUT));

    // Get the status.
    $job = mediamosa_job::get($result_row[mediamosa_job_db::ID], array(mediamosa_job_db::JOB_STATUS));
    $status = $job[mediamosa_job_db::JOB_STATUS];
    // Has to go like this, we cannot call the scheduler update code directly.
    // Alternative is writing "error" to this jobs contents so that the jobcore loop can return that status to the scheduler and let it handle setting the job on finished or failed.
    mediamosa_job::set_job_status_failed($result_row[mediamosa_job_db::ID], $error_message, $status);

    mediamosa_job_scheduler::log_mediafile($result_row[mediamosa_job_db::MEDIAFILE_ID], 'Transcode job was deleted because of timeout, job_id: @job_id', array('@job_id' => $result_row[mediamosa_job_db::ID]), $result_row[mediamosa_job_db::ASSET_ID]);
  }
}

/**
 * Implements hook_mediamosa_register_rest_call().
 */
function mediamosa_messenger_mediamosa_register_rest_call()
{
  $rest_calls = array();

  $rest_calls['jobcore/start'][mediamosa_rest_call::METHOD_GET] = array(
    mediamosa_rest_call::CLASS_NAME => 'mediamosa_messenger_jobcore',
    mediamosa_rest_call::STATUS => mediamosa_rest_call::STATUS_ACTIVE,
    mediamosa_rest_call::MODULE_NAME => 'mediamosa_messenger',
    mediamosa_rest_call::VERSION => mediamosa_version::MEDIAMOSA_VERSION_3_6_0,
    mediamosa_rest_call::BEHAVE_AS_EXTERNAL => TRUE,
    mediamosa_rest_call::ACCESS => mediamosa_rest_call::ACCESS_FOR_EXTERNAL,
  );

  $rest_calls['scheduler/start'][mediamosa_rest_call::METHOD_GET] = array(
    mediamosa_rest_call::CLASS_NAME => 'mediamosa_scheduler_start',
    mediamosa_rest_call::STATUS => mediamosa_rest_call::STATUS_ACTIVE,
    mediamosa_rest_call::MODULE_NAME => 'mediamosa_messenger',
    mediamosa_rest_call::VERSION => mediamosa_version::MEDIAMOSA_VERSION_3_6_0,
    mediamosa_rest_call::BEHAVE_AS_EXTERNAL => TRUE,
    mediamosa_rest_call::ACCESS => mediamosa_rest_call::ACCESS_FOR_EXTERNAL,
  );

  $rest_calls['scheduler/start_job'][mediamosa_rest_call::METHOD_GET] = array(
    mediamosa_rest_call::CLASS_NAME => 'mediamosa_scheduler_job_start',
    mediamosa_rest_call::STATUS => mediamosa_rest_call::STATUS_ACTIVE,
    mediamosa_rest_call::MODULE_NAME => 'mediamosa_messenger',
    mediamosa_rest_call::VERSION => mediamosa_version::MEDIAMOSA_VERSION_3_6_0,
    mediamosa_rest_call::BEHAVE_AS_EXTERNAL => TRUE,
    mediamosa_rest_call::ACCESS => mediamosa_rest_call::ACCESS_FOR_EXTERNAL,
  );

  $rest_calls['guardian/check'][mediamosa_rest_call::METHOD_GET] = array(
    mediamosa_rest_call::CLASS_NAME => 'mediamosa_messenger_guardian',
    mediamosa_rest_call::STATUS => mediamosa_rest_call::STATUS_ACTIVE,
    mediamosa_rest_call::MODULE_NAME => 'mediamosa_messenger',
    mediamosa_rest_call::VERSION => mediamosa_version::MEDIAMOSA_VERSION_3_6_0,
    mediamosa_rest_call::BEHAVE_AS_EXTERNAL => TRUE,
    mediamosa_rest_call::ACCESS => mediamosa_rest_call::ACCESS_FOR_EXTERNAL,
  );

  return $rest_calls;
}

function mediamosa_messenger_menu() {
  $items = array();
  $items['manualcron'] = array(
    'title' => 'Manual cron',
    'description' => '...',
    'access callback' => TRUE,
    'page callback' => '_mediamosa_messenger_cron',
    //'file' => 'mediamosa_messenger.module'
  );
  return $items;
}


