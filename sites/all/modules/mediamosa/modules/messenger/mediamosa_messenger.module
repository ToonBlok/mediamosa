<?php

function mediamosa_messenger_cron()
{
  mediamosa_debug::log('Start ' . __METHOD__, array(), 'T - MESSENGER');

//   static van maken, voor herbruikbaarheid en leesbaarheid, zo zie je meteen wat de methode doe als je zegt is_scheduler() : bool
//
//   kijk if string, cast naar array en behandel hierna altijd als array/
//   ...
//
//   vraag tools hier op
//   ...
//
//   if null dan niks doen
//   ...

  $server_type = variable_get('mediamosa_server_type');

  $query_data = [
    'server_type' => $server_type
  ];

  if (is_null($server_type)){
    call('/jobscheduler/roundupjobs?server_action=roundupjobs');
  } elseif (foo::is_jobcore($server_type)){
    //$queue = generate_unique_name();
    $core_types = variable_get('mediamosa_cores_tools');
//    mediamosa_debug::log('Slots requisted: ' . count($query_data['core_types']), array(),'T - MISC');

    foreach ($core_types as $core_type) {
      $query_data['core_type'] = $core_type;
      $query_data['keepalive_queue_name'] = generate_unique_name($core_type);

      $location = '/scheduler_guardian/check?' . http_build_query($query_data);

      call($location);
      mediamosa_debug::log('server type: ' . $query_data['server_type'] . ', unique id: ' . $query_data['keepalive_queue_name'] , array(), 'T - MISC');
    }


  } else {
    $location = '/scheduler_guardian/check?' . http_build_query($query_data);

    call($location);
  }

}

function generate_unique_name($core_type){
  // Server with 1 responsibility
  if (count($core_type) == 1) {
    $core_type_name = $core_type[0];
  } else { // Server with 2 responsibilities
    $core_type_name = $core_type[0] . '_' . $core_type[1];
  }
  return  $core_type_name . '_' . uniqid();
}

function call_guardian(){

}

class foo {
  public static function is_jobcore($server_type) {
    return ($server_type == 'jobcore') ? 1 : 0;
  }
}

function call($location) {
  // Test REST CALL
  $mediamosa_jobscheduler_uri = variable_get('mediamosa_jobscheduler_uri', NULL);
  if (isset($mediamosa_jobscheduler_uri)) {

    $url = mediamosa_http::uri2url($mediamosa_jobscheduler_uri) . $location;

    // Log it.
    mediamosa_job_scheduler::log_debug('Triggering job scheduler @ @uri', array('@uri' => $url));

    // Dont trigger in sandbox.
    if (mediamosa::in_simpletest_sandbox()) {
      // So we wait till finished.
      MediaMosaTestCase::staticInternalRestCallGet($url);
    } else {
      // Trigger.
      mediamosa_http::do_head_internal_call($url);
    }
  } else {
    mediamosa_job_scheduler::log('Jobscheduler URL not set, please setup jobscheduler server in the @link.', array('@link' => l(t('MediaMosa configuration'), 'admin/mediamosa/config/global')), WATCHDOG_ALERT, 'job_cron');
  }

}

/**
 * Implements hook_mediamosa_register_rest_call().
 */
function mediamosa_messenger_mediamosa_register_rest_call()
{
  $rest_calls = array();

  $rest_calls['jobcore/parsequeue'][mediamosa_rest_call::METHOD_GET] = array(
    mediamosa_rest_call::CLASS_NAME => 'jobcore',
    mediamosa_rest_call::STATUS => mediamosa_rest_call::STATUS_ACTIVE,
    mediamosa_rest_call::MODULE_NAME => 'mediamosa_messenger',
    mediamosa_rest_call::VERSION => mediamosa_version::MEDIAMOSA_VERSION_3_6_0,
    mediamosa_rest_call::BEHAVE_AS_EXTERNAL => TRUE,
    mediamosa_rest_call::ACCESS => mediamosa_rest_call::ACCESS_FOR_EXTERNAL,
  );

  $rest_calls['jobscheduler/roundupjobs'][mediamosa_rest_call::METHOD_GET] = array(
    mediamosa_rest_call::CLASS_NAME => 'scheduler',
    mediamosa_rest_call::STATUS => mediamosa_rest_call::STATUS_ACTIVE,
    mediamosa_rest_call::MODULE_NAME => 'mediamosa_messenger',
    mediamosa_rest_call::VERSION => mediamosa_version::MEDIAMOSA_VERSION_3_6_0,
    mediamosa_rest_call::BEHAVE_AS_EXTERNAL => TRUE,
    mediamosa_rest_call::ACCESS => mediamosa_rest_call::ACCESS_FOR_EXTERNAL,
  );

  $rest_calls['scheduler_guardian/check'][mediamosa_rest_call::METHOD_GET] = array(
    mediamosa_rest_call::CLASS_NAME => 'scheduler_guardian',
    mediamosa_rest_call::STATUS => mediamosa_rest_call::STATUS_ACTIVE,
    mediamosa_rest_call::MODULE_NAME => 'mediamosa_messenger',
    mediamosa_rest_call::VERSION => mediamosa_version::MEDIAMOSA_VERSION_3_6_0,
    mediamosa_rest_call::BEHAVE_AS_EXTERNAL => TRUE,
    mediamosa_rest_call::ACCESS => mediamosa_rest_call::ACCESS_FOR_EXTERNAL,
  );

  return $rest_calls;
}

