<?php
/**
 * @file
 * Core - Open source media management and distribution platform.
 */

// Default settings.
require_once 'mediamosa.settings.class.inc';
require_once 'mediamosa.permission.class.inc';

// Node types hook include.
require_once 'core/node/mediamosa_node.class.inc';
require_once 'core/node/mediamosa_node_mediamosa_app.class.inc';
require_once 'core/node/mediamosa_node_mediamosa_server.inc';
require_once 'core/node/mediamosa_node_mediamosa_transcode_profile.inc';

define('FEATURE_MEDIAMOSA_SERVER', 'mediamosa_server');
define('FEATURE_MEDIAMOSA_TRANSCODE_PROFILE', 'mediamosa_transcode_profile');
define('FEATURE_MEDIAMOSA_TOOL_PARAMS', 'mediamosa_tool_params');
define('FEATURE_MEDIAMOSA_VIEWER', 'mediamosa_viewer');

/**
 * Implements hook_features_api().
 */
function mediamosa_features_api() {
  return array(
    FEATURE_MEDIAMOSA_SERVER => array(
      'name' => t('MediaMosa Servers'),
      'feature_source' => TRUE,
      'default_hook' => 'mediamosa_servers',
      'default_file' => FEATURES_DEFAULTS_INCLUDED,
      'file' => drupal_get_path('module', 'mediamosa') . '/core/server/mediamosa_server.features.inc'
    ),
    FEATURE_MEDIAMOSA_TRANSCODE_PROFILE => array(
      'name' => t('MediaMosa Transcode Profiles'),
      'feature_source' => TRUE,
      'default_hook' => 'mediamosa_transcode_profiles',
      'default_file' => FEATURES_DEFAULTS_INCLUDED,
      'file' => drupal_get_path('module', 'mediamosa') . '/core/transcode/profile/mediamosa_transcode_profile.features.inc'
    ),
    FEATURE_MEDIAMOSA_TOOL_PARAMS => array(
      'name' => t('MediaMosa Tool Parameters'),
      'feature_source' => TRUE,
      'default_hook' => FEATURE_MEDIAMOSA_TOOL_PARAMS,
      'default_file' => FEATURES_DEFAULTS_INCLUDED,
      'file' => drupal_get_path('module', 'mediamosa') . '/core/tool/params/mediamosa_tool_params.features.inc'
    ),
    FEATURE_MEDIAMOSA_VIEWER => array(
      'name' => t('MediaMosa viewers'),
      'feature_source' => TRUE,
      'default_hook' => FEATURE_MEDIAMOSA_VIEWER . 's',
      'default_file' => FEATURES_DEFAULTS_INCLUDED,
      'file' => drupal_get_path('module', 'mediamosa') . '/core/viewer/mediamosa_viewer.features.inc'
    ),
  );
}

/**
 * Implements hook_mediamosa_storage_info().
 */
function mediamosa_mediamosa_storage_info() {
  return array(
    mediamosa_storage_local::NAME => array(
      'name' => t('MediaMosa local storage'),
      'description' => t('The normal local MediaMosa storage.'),
    )
  );
}

/**
 * Implements hook_mediamosa_acl().
 */
function mediamosa_mediamosa_acl(array $object, $op, $acl_type, $app_id, $user_id, $is_app_admin, array $acl_data = array()) {
  // Any change will trigger reindex object.
  switch ($acl_type) {
    case mediamosa_acl::ACL_TYPE_MEDIAFILE:
      // ACL status changed, remove possible perm. link.
      mediamosa_media::remove_public_link($object['app_id'], $object['mediafile_id']);

      // Reindex the asset using the mediafile ID.
      mediamosa_asset_mediafile::mediamosa_asset_reindex(array($object['mediafile_id']), mediamosa_settings::SEARCH_INDEX_TYPE_ACL);
      break;

    case mediamosa_acl::ACL_TYPE_ASSET:
      // ACL status changed, remove possible perm. link.
      mediamosa_media::remove_public_link_asset($object['asset_id']);

      // Reindex the asset using the mediafile ID.
      mediamosa_asset::mediamosa_asset_reindex(array($object['asset_id']), mediamosa_settings::SEARCH_INDEX_TYPE_ACL);
      break;
  }
}

/**
 * Implements hook_stream_wrappers().
 */
function mediamosa_stream_wrappers() {
  $wrappers = array();

  // Do not use our stream wrappers during update and at the point our stream
  // wrappers are not known.
  if (defined('MAINTENANCE_MODE') && (MAINTENANCE_MODE == 'update')) {
    if ((function_exists('drupal_get_installed_schema_version'))
      && drupal_get_installed_schema_version('mediamosa', TRUE) < 7142) {
      return $wrappers;
    }
  }

  // Our MediaMosa Stream Wrappers.
  $wrappers = array(
    'mediamosa-storage' => array(
      'name' => t('MediaMosa storage local mount point location'),
      'class' => 'mediamosa_io_streamwrapper_local',
      'description' => t('All local files and symbolic links used by MediaMosa.'),
      'type' => STREAM_WRAPPERS_LOCAL_HIDDEN,
    ),
    'mediamosa-storage-data' => array(
      'name' => t('MediaMosa storage data local mount point location'),
      'class' => 'mediamosa_io_streamwrapper_local_data',
      'description' => t('Local storage of the mediafiles.'),
      'type' => STREAM_WRAPPERS_LOCAL_HIDDEN,
    ),
    'mediamosa-storage-external-uri' => array(
      'name' => t('MediaMosa URI external located based files.'),
      'class' => 'mediamosa_io_streamwrapper_external_uri',
      'description' => t('Uses the URI field in MediaFile that points to an external viewable file.'),
      'type' => STREAM_WRAPPERS_LOCAL_HIDDEN,
    ),
    'mediamosa-storage-stills' => array(
      'name' => t('MediaMosa storage local mount point location for stills'),
      'class' => 'mediamosa_io_streamwrapper_local_stills',
      'description' => t('Local storage of the stills.'),
      'type' => STREAM_WRAPPERS_LOCAL_HIDDEN,
    ),
    'mediamosa-storage-media' => array(
      'name' => t('MediaMosa storage media local mount point location'),
      'class' => 'mediamosa_io_streamwrapper_local_media',
      'description' => t('All local files and symbolic links used by MediaMosa.'),
      'type' => STREAM_WRAPPERS_LOCAL_HIDDEN,
    ),
    'mediamosa-storage-temporary' => array(
      'name' => t('Temporary MediaMosa files'),
      'class' => 'mediamosa_io_streamwrapper_local_temporary',
      'description' => t('Temporary local files for transcoding and still generation.'),
      'type' => STREAM_WRAPPERS_LOCAL_HIDDEN,
    ),
    'mediamosa-storage-transition' => array(
      'name' => t('Transition MediaMosa files'),
      'class' => 'mediamosa_io_streamwrapper_local_transition',
      'description' => t('Transitional local files for temporary usage and kept as long as the transition diskspace allows it.'),
      'type' => STREAM_WRAPPERS_LOCAL_HIDDEN,
    ),
    'mediamosa-storage-transition-links' => array(
      'name' => t('Transition MediaMosa links'),
      'class' => 'mediamosa_io_streamwrapper_local_transition_links',
      'description' => t('Transitional links are symlinks to transition files.'),
      'type' => STREAM_WRAPPERS_LOCAL_HIDDEN,
    ),
    'mediamosa-storage-simpletest' => array(
      'name' => t('MediaMosa storage simpletest mount point location'),
      'class' => 'mediamosa_storage_simpletest_stream_wrapper',
      'description' => t('All files and symbolic links used by MediaMosa during Simpletest.'),
      'type' => STREAM_WRAPPERS_LOCAL_HIDDEN,
    ),
  );

  return $wrappers;
}

/**
 * Implements hook_permission().
 */
function mediamosa_permission() {

  // Text.
  $text_master_switch = 'Master switch which allows to view all MediaMosa @type pages. If you set this master switch, then there is no need to enable its subsections permissions. These are granted by the master switch.';
  $text_view_switch = 'Allows user to view the @type page.';
  $text_edit_switch = 'Allows user to edit the @type page.';

  $perms = array(
    // Administer MediaMosa.
    mediamosa_permission::ADMIN_MEDIAMOSA => array(
      'title' => t('Administer MediaMosa'),
      'description' => t('Administer MediaMosa is the super user that allows the user to do everything on MediaMosa backend.'),
      'restrict access' => TRUE,
    ),

    // Access to sections/pages.
    mediamosa_permission::ACCESS_STATUS => array(
      'title' => t('Access MediaMosa status pages'),
      'description' => t($text_master_switch, array('@type' => 'status')),
    ),
    mediamosa_permission::ACCESS_STATUS_COMMON => array(
      'title' => t('Access MediaMosa status page (common)'),
      'description' => t($text_view_switch, array('@type' => 'status common')),
    ),
    mediamosa_permission::ACCESS_STATUS_SERVERS => array(
      'title' => t('Access MediaMosa status page (server info)'),
      'description' => t($text_view_switch, array('@type' => 'status servers status')),
    ),
    mediamosa_permission::ACCESS_STATUS_JOB => array(
      'title' => t('Access MediaMosa status page (jobs)'),
      'description' => t($text_view_switch, array('@type' => 'status job')),
    ),

    mediamosa_permission::ACCESS_CONTENT => array(
      'title' => t('Access MediaMosa content'),
      'description' => t($text_master_switch, array('@type' => 'content')),
    ),
    mediamosa_permission::ACCESS_CONTENT_ASSETS => array(
      'title' => t('Access MediaMosa content (assets)'),
      'description' => t($text_view_switch, array('@type' => 'assets')),
    ),
    mediamosa_permission::ACCESS_CONTENT_COLLECTIONS => array(
      'title' => t('Access MediaMosa content (collections)'),
      'description' => t($text_view_switch, array('@type' => 'collections')),
    ),
    mediamosa_permission::ACCESS_CONTENT_REVISIONS => array(
      'title' => t('Access MediaMosa content (revisions)'),
      'description' => t($text_view_switch, array('@type' => 'revisions')),
    ),
    mediamosa_permission::ACCESS_CONTENT_ERRORCODES => array(
      'title' => t('Access MediaMosa content (errorcodes)'),
      'description' => t($text_view_switch, array('@type' => 'errorcodes')),
    ),
    mediamosa_permission::ACCESS_EDIT_ERRORCODES => array(
      'title' => t('Edit MediaMosa content (errorcodes)'),
      'description' => t($text_edit_switch, array('@type' => 'errorcodes')),
    ),
    mediamosa_permission::ACCESS_CONTENT_JOB_FAILURE => array(
      'title' => t('Access MediaMosa tools (failured job)'),
      'description' => t($text_view_switch, array('@type' => 'failured job')),
    ),

    mediamosa_permission::ACCESS_TOOLS => array(
      'title' => t('Access MediaMosa tools'),
      'description' => t($text_master_switch, array('@type' => 'tools')),
    ),
    mediamosa_permission::ACCESS_TOOLS_RESTCALLS => array(
      'title' => t('Access MediaMosa tools (REST calls)'),
      'description' => t($text_view_switch, array('@type' => 'restcalls')),
    ),
    mediamosa_permission::ACCESS_TOOLS_LOG => array(
      'title' => t('Access MediaMosa tools (log)'),
      'description' => t($text_view_switch, array('@type' => 'log')),
    ),
    mediamosa_permission::ACCESS_TOOLS_BATCH => array(
      'title' => t('Access MediaMosa tools (batch jobs)'),
      'description' => t($text_view_switch, array('@type' => 'batch jobs')),
    ),
    mediamosa_permission::ACCESS_TOOLS_TESTING => array(
      'title' => t('Access MediaMosa tools (testing)'),
      'description' => t($text_view_switch, array('@type' => 'testing')),
    ),
    mediamosa_permission::ACCESS_TOOLS_TESTING_SETTINGS => array(
      'title' => t('Access MediaMosa tools (testing settings)'),
      'description' => t($text_view_switch, array('@type' => 'testing settings')),
    ),
    mediamosa_permission::ACCESS_TOOLS_FILE_INTEGRITY => array(
      'title' => t('Access MediaMosa tools (errorcodes)'),
      'description' => t($text_view_switch, array('@type' => 'file integrity')),
    ),
    mediamosa_permission::ACCESS_TOOLS_TRANSCODE_LENGTH_DEVIATION => array(
      'title' => t('Access MediaMosa tools (transcode length deviation)'),
      'description' => t($text_view_switch, array('@type' => 'transcode length deviation')),
    ),

    mediamosa_permission::ACCESS_STATS => array(
      'title' => t('Access MediaMosa statistics'),
      'description' => t($text_master_switch, array('@type' => 'statistics')),
    ),
    mediamosa_permission::ACCESS_STATS_DISKSPACE_USED => array(
      'title' => t('Access MediaMosa statistics (diskspace used)'),
      'description' => t($text_view_switch, array('@type' => 'statistics diskspace used')),
    ),
    mediamosa_permission::ACCESS_STATS_LATEST_COLLECTIONS => array(
      'title' => t('Access MediaMosa statistics (latest collections)'),
      'description' => t($text_view_switch, array('@type' => 'statistics latest collections')),
    ),
    mediamosa_permission::ACCESS_STATS_LATEST_MEDIAFILES => array(
      'title' => t('Access MediaMosa statistics (latest mediafiles)'),
      'description' => t($text_view_switch, array('@type' => 'statistics latest mediafiles')),
    ),
    mediamosa_permission::ACCESS_STATS_SEARCH_WORDS => array(
      'title' => t('Access MediaMosa statistics (used words)'),
      'description' => t($text_view_switch, array('@type' => 'statistics the most used words during search')),
    ),
    mediamosa_permission::ACCESS_STATS_STREAM_REQUEST => array(
      'title' => t('Access MediaMosa statistics (streaming requests)'),
      'description' => t($text_view_switch, array('@type' => 'statistics streaming per file')),
    ),

    mediamosa_permission::ACCESS_CONFIG => array(
      'title' => t('Access MediaMosa configuration'),
      'description' => t($text_master_switch, array('@type' => 'configuration')),
    ),
    mediamosa_permission::ACCESS_CONFIG_SERVERS => array(
      'title' => t('Access MediaMosa configuration (servers)'),
      'description' => t($text_view_switch, array('@type' => 'servers')),
    ),
    mediamosa_permission::ACCESS_CONFIG_APPS => array(
      'title' => t('Access MediaMosa configuration (client applications)'),
      'description' => t($text_view_switch, array('@type' => 'client applications')),
    ),
    mediamosa_permission::ACCESS_CONFIG_TOOLPARAMS => array(
      'title' => t('Access MediaMosa configuration (tool parameters)'),
      'description' => t($text_view_switch, array('@type' => 'tool parameters')),
    ),
    mediamosa_permission::ACCESS_CONFIG_TOOLMAPPING => array(
      'title' => t('Access MediaMosa configuration (tool mapping)'),
      'description' => t($text_view_switch, array('@type' => 'tool mapping')),
    ),
    mediamosa_permission::ACCESS_CONFIG_TRANSCODE_PROFILES => array(
      'title' => t('Access MediaMosa configuration (transcode profiles)'),
      'description' => t($text_view_switch, array('@type' => 'transcode profiles')),
    ),
    mediamosa_permission::ACCESS_CONFIG_STORAGE_PROFILES => array(
      'title' => t('Access MediaMosa configuration (storage profiles)'),
      'description' => t($text_view_switch, array('@type' => 'storage profiles')),
    ),
    mediamosa_permission::ACCESS_CONFIG_WEBSERVICES => array(
      'title' => t('Access MediaMosa configuration (webservices)'),
      'description' => t($text_view_switch, array('@type' => 'webservices')),
    ),
    mediamosa_permission::UPDATE_CONFIG_WEBSERVICES => array(
      'title' => t('Update MediaMosa configuration (webservices)'),
      'description' => t($text_edit_switch, array('@type' => 'webservices')),
    ),
  );

  // Add the roles of the apps.
  $apps = mediamosa_app::get_all_apps_cached();

  // Get the apps.
  foreach ($apps as $app) {
    $perms[mediamosa_permission::ADMIN_MEDIAMOSA . '|app|' . $app[mediamosa_app_db::APP_ID]] = array(
      'title' => t('Content owner of client application {app_name}', array('{app_name}' => $app[mediamosa_app_db::APP_NAME])),
      'description' => t('Making the user content owner of this client application will give limited access to the assets, mediafiles and other content of its client application.'),
    );
  }

  // Done, return them.
  return $perms;
}

/**
 * Check access menu item.
 *
 * @param sting/array $perms
 *   Array containing permissions, right on one of them is access.
 * @param bool $one_part_test
 *   Set to TRUE if you want to see if any permission is set for MediaMosa.
 *
 * @see _mediamosa_user_access_mediamosa()
 */
function _mediamosa_user_access($perms, $one_part_test = FALSE) {
  global $user;

  if (is_array($perms)) {
    foreach ($perms as $perm) {
      if (_mediamosa_user_access($perm)) {
        return TRUE;
      }
    }

    return FALSE;
  }

  // Deny all on anonymous.
  if (mediamosa::deny_anonymous() && !user_is_logged_in()) {
    return FALSE;
  }

  // Explode on parts.
  $parts = explode('|', $perms);

  // Now work from right to left.
  $perm = array();
  foreach ($parts as $part) {
    $perm[] = $part;

    if (user_access(implode('|', $perm))) {
      return TRUE;
    }
  }

  // One part? Then skip the user role check.
  if (count($parts) == 1 && !$one_part_test) {
    return FALSE;
  }

  // Get the roles.
  $role_permissions = user_role_permissions($user->roles);
  if (empty($role_permissions)) {
    return FALSE;
  }

  $perms .= '|';

  // If part of role is there.
  foreach (array_keys($user->roles) as $rid) {
    foreach ($role_permissions[$rid] as $role_permission => $switch) {
      if (empty($switch)) {
        continue;
      }

      // Part of role?
      if ($perms === substr($role_permission, 0, drupal_strlen($perms))) {
        return TRUE;
      }
    }
  }

  return FALSE;
}

/**
 * Check if user has any access to MediaMosa.
 */
function _mediamosa_user_access_mediamosa() {
  // As soon one permission is set for MediaMosa, we have at least access to
  // home.
  return _mediamosa_user_access('mediamosa', TRUE);
}

/**
 * Check if user has app ownership.
 */
function _mediamosa_user_access_asset($asset_id) {

  // Is owner of asset by app role?
  return mediamosa_permission::is_app_owner_asset($asset_id);
}

/**
 * Implements hook_init().
 */
function mediamosa_init() {
  // Possible PHP 5.3 autoloader bug.
  require_once DRUPAL_ROOT . '/' . drupal_get_path('module', 'mediamosa') . '/lib/mediamosa_debug.class.inc';

  // Create and get the core object.
  $mediamosa = mediamosa::get();

  // Now call the rest process function to process possible rest call.
  $mediamosa->process_rest();

  // If we get here, then no REST interface is on.

  // Need some fixes on CSS.
  drupal_add_css(drupal_get_path('module', 'mediamosa') . '/mediamosa.css', array('group' => CSS_THEME, 'weight' => 10));
}

/**
 * The MediaMosa REST menu callback (not implemented).
 */
function _mediamosa() {
  // Create and get the core object.
  $mediamosa = mediamosa::get();

  // Now call the rest process function to process possible rest call.
  $mediamosa->process_rest();

  // If our the URL didn't match, then at this point we return MENU_NOT_FOUND for drupal.
  return MENU_NOT_FOUND;
}

/**
 * Implements hook_block_info().
 */
function mediamosa_block_info() {
  // Set block.
  $blocks['mediamosa-version'] = array(
    'info' => t('MediaMosa version'),
    'weight' => '15',
    'cache' => DRUPAL_NO_CACHE,
  );

  return $blocks;
}

/**
 * Implements hook_theme().
 /
function mediamosa_theme() {
  return array(
    'mediamosa_version' => array(
      'variables' => array(),
    ),
  );
}

/**
 * Implements hook_mediamosa_metadata_info().
 */
function mediamosa_mediamosa_metadata_info() {
  $metadata_info[mediamosa_metadata_asset::METADATA_PROPERTY_GROUP_NAME] = array(
    'title' => t('Asset'),
    'description' => t('The asset metadata.'),
    'context' => 'asset',
    'context_full' => 'asset',
  );

  if (mediamosa::in_simpletest_sandbox()) {
    $metadata_info['simpletest'] = array(
      'title' => t('Test'),
      'description' => t('Only during unit tests.'),
      'context' => 'simpletest',
      'context_full' => 'simpletest',
    );
  }

  return $metadata_info;
}

/**
 * Implements hook_mediamosa_tool_info().
 *
 * @return array
 *   An array filled with information about the tools.
 */
function mediamosa_mediamosa_tool_info() {
  return array(
    mediamosa_job_server::MEDIAMOSA_JOB_SERVER_TOOL_TRANSFER => array(
      'name' => t('File transfer'),
      'description' => t('The server tool that uploads, downloads and moves files from external storage like S3, YouTube etc.'),
      // Temporary solution till 3.6.
      'is_full_tool' => FALSE,
    ),
    mediamosa_job_server::MEDIAMOSA_JOB_SERVER_TOOL_ANALYSE => array(
      'name' => t('Analyse media'),
      'description' => t('The analyse tool is used to generate technical metadata.'),
      // Temporary solution till 3.6.
      'is_full_tool' => FALSE,
    ),
    mediamosa_job_server::MEDIAMOSA_JOB_SERVER_TOOL_STILL => array(
      'name' => t('Generate stills'),
      'description' => t('These tools generate images (stills) to represent the media as an image. e.g. thumbnail.'),
      // Temporary solution till 3.6.
      'is_full_tool' => FALSE,
    ),
  );
}

/**
 * Format the MediaMosa version text.
 */
function theme_mediamosa_version($variables) {
  // Get version info.
  $version = mediamosa_version::get_current_version(TRUE);

  return strtr('<div style="text-align:center;"><span style="background-image: url(!logo);background-position:left center;background-repeat:no-repeat;padding-left:22px;">MediaMosa v!MAJOR.!MINOR.!RELEASE (build !BUILD)!INFO</span></div>',
    array(
      '!logo' => url(dirname(drupal_get_filename('module', 'mediamosa')) . '/lib/misc/mediamosa-logo-19x16.png'),
      '!MAJOR' => $version[mediamosa_version::MAJOR],
      '!MINOR' => $version[mediamosa_version::MINOR],
      '!RELEASE' => $version[mediamosa_version::RELEASE],
      '!BUILD' => $version[mediamosa_version::BUILD],
      '!INFO' => empty($version[mediamosa_version::INFO]) ? '' : ' - ' . $version[mediamosa_version::INFO],
    )
  );
}

/**
 * Implements hook_block_view().
 */
function mediamosa_block_view($delta = '') {
  $block = array();
  switch ($delta) {
    case 'mediamosa-version':
      $block['subject'] = NULL;
      $block['content'] = theme('mediamosa_version');
      return $block;
  }
}

/**
 * Implements hook_mediamosa_register_rest_call().
 */
function mediamosa_mediamosa_register_rest_call() {

  $rest_calls = array();

  $rest_calls['rest'][mediamosa_rest_call::METHOD_GET] = array(
    mediamosa_rest_call::CLASS_NAME => 'mediamosa_rest_call_list',
    mediamosa_rest_call::STATUS => mediamosa_rest_call::STATUS_ACTIVE,
    mediamosa_rest_call::MODULE_NAME => 'mediamosa',
    mediamosa_rest_call::VERSION => mediamosa_version::MEDIAMOSA_VERSION_2_0_0,
  );

  $rest_calls['rest/$uri_id'][mediamosa_rest_call::METHOD_GET] = array(
    mediamosa_rest_call::CLASS_NAME => 'mediamosa_rest_call_get',
    mediamosa_rest_call::STATUS => mediamosa_rest_call::STATUS_ACTIVE,
    mediamosa_rest_call::MODULE_NAME => 'mediamosa',
    mediamosa_rest_call::VERSION => mediamosa_version::MEDIAMOSA_VERSION_2_0_0,
  );

  $rest_calls['version'][mediamosa_rest_call::METHOD_GET] = array(
    mediamosa_rest_call::CLASS_NAME => 'mediamosa_rest_call_mediamosa_version',
    mediamosa_rest_call::STATUS => mediamosa_rest_call::STATUS_ACTIVE,
    mediamosa_rest_call::MODULE_NAME => 'mediamosa',
    mediamosa_rest_call::VERSION => mediamosa_version::MEDIAMOSA_VERSION_1_6_1,
    mediamosa_rest_call::BEHAVE_AS_EXTERNAL => TRUE,
    mediamosa_rest_call::ACCESS => mediamosa_rest_call::ACCESS_FOR_EXTERNAL,
  );

  $rest_calls['simpletest/cleanup'][mediamosa_rest_call::METHOD_GET] = array(
    mediamosa_rest_call::CLASS_NAME => 'mediamosa_rest_call_simpletest_cleanup',
    mediamosa_rest_call::STATUS => mediamosa_rest_call::STATUS_ACTIVE,
    mediamosa_rest_call::MODULE_NAME => 'mediamosa',
    mediamosa_rest_call::VERSION => mediamosa_version::MEDIAMOSA_VERSION_2_3_0,
    mediamosa_rest_call::ACCESS => mediamosa_rest_call::ACCESS_INTERNAL_ONLY,
    mediamosa_rest_call::NO_USER_ABORT => TRUE,
  );

  $rest_calls['job/$job_id/execute'][mediamosa_rest_call::METHOD_GET] = array(
    mediamosa_rest_call::CLASS_NAME => 'mediamosa_rest_call_server_job_execute',
    mediamosa_rest_call::STATUS => mediamosa_rest_call::STATUS_ACTIVE,
    mediamosa_rest_call::MODULE_NAME => 'mediamosa',
    mediamosa_rest_call::VERSION => mediamosa_version::MEDIAMOSA_VERSION_3_4_0,
    mediamosa_rest_call::ACCESS => mediamosa_rest_call::ACCESS_INTERNAL_ONLY,
    mediamosa_rest_call::NO_USER_ABORT => TRUE,
  );

  // These REST calls are only available during the sandbox of simpletest.
  if (mediamosa::in_simpletest_sandbox()) {
    $rest_calls['simpletest/whoami'][mediamosa_rest_call::METHOD_GET] = array(
      mediamosa_rest_call::CLASS_NAME => 'mediamosa_rest_call_simpletest_whoami',
      mediamosa_rest_call::STATUS => mediamosa_rest_call::STATUS_ACTIVE,
      mediamosa_rest_call::MODULE_NAME => 'mediamosa',
      mediamosa_rest_call::VERSION => mediamosa_version::MEDIAMOSA_VERSION_2_1_0,
    );
  }

  return $rest_calls;
}

/**
 * Implements hook_mediamosa_register_rest_call_doc().
 */
function mediamosa_mediamosa_register_rest_call_doc() {

  $rest_calls = array();

  $rest_calls['rest'][mediamosa_rest_call::METHOD_GET] = array(
    mediamosa_rest_call::TITLE => 'Get listing MediaMosa REST calls.',
    mediamosa_rest_call::DESCRIPTION => 'Retrieve the listing of the current registered MediaMosa REST calls.',
    mediamosa_rest_call::EXAMPLE_REQUEST => 'rest?limit=10',
    mediamosa_rest_call::RESPONSE_FIELDS => array(),
    mediamosa_rest_call::EXAMPLE_RESPONSE => <<<'EOT'
<items>
  <item id="1">
    <access>5</access>
    <behave_as_external></behave_as_external>
    <class_name>mediamosa_rest_call_asset_search</class_name>
    <default_params_values>
      <app_id>0</app_id>
    </default_params_values>
    <method>GET</method>
    <module_name>mediamosa_asset</module_name>
    <response_type>text/xml</response_type>
    <status>active</status>
    <uri>asset</uri>
    <uri_id>1</uri_id>
    <version>1.1.0</version>
  </item>
</items>
EOT
  );

  $rest_calls['rest/$uri_id'][mediamosa_rest_call::METHOD_GET] = array(
    mediamosa_rest_call::TITLE => 'Get details REST call.',
    mediamosa_rest_call::DESCRIPTION => 'Retrieve specific information about a registered MediaMosa REST call.',
    mediamosa_rest_call::EXAMPLE_REQUEST => 'rest/33',
    mediamosa_rest_call::RESPONSE_FIELDS => array(),
    mediamosa_rest_call::EXAMPLE_RESPONSE => <<<'EOT'
<items>
  <item id="1">
    <access>5</access>
    <behave_as_external></behave_as_external>
    <class_name>mediamosa_rest_call_acl_group_get</class_name>
    <method>GET</method>
    <module_name>mediamosa_acl</module_name>
    <response_type>text/xml</response_type>
    <status>active</status>
    <uri>autorisation_group/$groupname</uri>
    <uri_id>33</uri_id>
    <version>1.1.0</version>
    <vars>
      <groupname>
        <type>STRING</type>
        <is_required>YES</is_required>
        <description>The group name to retrieve</description>
      </groupname>
      <app_id>
        <type>APP_ID</type>
        <is_required>YES</is_required>
        <is_array>YES</is_array>
        <default_value>0</default_value>
        <description>The application ID.</description>
      </app_id>
      <is_app_admin>
        <type>BOOL</type>
        <is_required>NO</is_required>
        <description>NOT USED.</description>
        <default_value>false</default_value>
      </is_app_admin>
    </vars>
  </item>
</items>
EOT
  );

  $rest_calls['version'][mediamosa_rest_call::METHOD_GET] = array(
    mediamosa_rest_call::TITLE => 'Get details REST call.',
    mediamosa_rest_call::DESCRIPTION => 'Retrieve the current version of MediaMosa.',
    mediamosa_rest_call::EXAMPLE_REQUEST => '/version [GET]',
    mediamosa_rest_call::RESPONSE_FIELDS => array(),
    mediamosa_rest_call::EXAMPLE_RESPONSE => <<<'EOT'
<items>
  <item id="1">
    <version>2.3.4</version>
    <build>1246</build>
    <info></info>
  </item>
</items>
EOT
  );

  $rest_calls['job/$job_id/execute'][mediamosa_rest_call::METHOD_GET] = array(
    mediamosa_rest_call::TITLE => 'Execute the job.',
    mediamosa_rest_call::DESCRIPTION => 'The page call will execute the job. Is only available for specific job types (for now). Use HEAD method to trigger the call. With the HEAD method, the webserver will not wait for the call to complete.',
    mediamosa_rest_call::EXAMPLE_REQUEST => '/job/2234/execute [GET]',
    mediamosa_rest_call::RESPONSE_FIELDS => array(),
    mediamosa_rest_call::EXAMPLE_RESPONSE => <<<'EOT'
<items>
  <item id="1">
  </item>
</items>
EOT
  );

  return $rest_calls;
}

/**
 * Implements hook_mediamosa_configuration_collect().
 */
function mediamosa_mediamosa_configuration_collect() {

  $form = array();

  $form['settings_storage'] = array(
    '#type' => 'fieldset',
    '#title' => t('File system'),
    '#description' => t('<b>The file system settings should not be changed during normal operations</b>. Make sure all jobs are finished before changing any of these settings.'),
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
  );

  $form['settings_storage']['mount-point'] = array(
    '#type' => 'fieldset',
    '#title' => t('Mount point'),
    '#description' => t('The mount point is a shared directory where related mediafiles, images and other files are stored. On a multi-server setup, this file system path needs to be available for all servers (i.e. through NFS).'),
    '#collapsible' => TRUE,
    '#collapsed' => FALSE,
  );

  $form['settings_storage']['mount-point']['mediamosa_current_mount_point'] = array(
    '#type' => 'textfield',
    '#title' => t('MediaMosa storage file system path'),
    '#description' => t('An existing local file system path for storing MediaMosa related files. It should be writable by MediaMosa.'),
    '#required' => TRUE,
    '#default_value' => mediamosa::variable_get('mediamosa_current_mount_point', '/srv/mediamosa'),
  );

  $form['settings_storage']['mount-point']['mediamosa_current_mount_point_windows'] = array(
    '#type' => 'textfield',
    '#title' => t('MediaMosa storage file system path windows'),
    '#description' => t('An existing local file system path for storing MediaMosa related files for Windows OS based servers. It should be writable by MediaMosa. (use UNC path like \\\\server\\share\\file_path).'),
    '#required' => FALSE,
    '#default_value' => mediamosa::variable_get('mediamosa_current_mount_point_windows', '\\\\'),
  );

  $form['settings_storage']['mount-point']['mediamosa_current_mount_point_stills'] = array(
    '#type' => 'textfield',
    '#title' => t('MediaMosa storage file system path for stills'),
    '#description' => t('An existing local file system path for storing MediaMosa related files, specificly still images. It should be writable by MediaMosa.'),
    '#required' => TRUE,
    '#default_value' => mediamosa::variable_get('mediamosa_current_mount_point_stills', '/srv/mediamosa'),
  );

  $form['settings_storage']['mount-point']['mediamosa_current_mount_point_stills_windows'] = array(
    '#type' => 'textfield',
    '#title' => t('MediaMosa storage file system path windows for stills'),
    '#description' => t('An existing local file system path for storing MediaMosa related files for Windows OS based servers, specificly still images. It should be writable by MediaMosa. (use UNC path like \\\\server\\share\\file_path).'),
    '#required' => FALSE,
    '#default_value' => mediamosa::variable_get('mediamosa_current_mount_point_stills_windows', '\\\\'),
  );

  $form['settings_storage']['temporary'] = array(
    '#type' => 'fieldset',
    '#title' => t('Temporary system path'),
    '#description' => t('The temporary file system path is the location where MediaMosa stores temporary files for transcoding and still generation. The location of the temporary directory must be located on an shared location, accessable to all job servers. The default location is on the shared mount point.'),
    '#collapsible' => TRUE,
    '#collapsed' => FALSE,
  );

  $form['settings_storage']['temporary']['mediamosa_current_mount_point_temporary'] = array(
    '#type' => 'textfield',
    '#title' => t('MediaMosa temporary system path'),
    '#description' => t('The linux temporary system path'),
    '#required' => TRUE,
    '#default_value' => mediamosa::variable_get('mediamosa_current_mount_point_temporary', '/srv/mediamosa/data/transcode'),
  );

  $form['settings_storage']['temporary']['mediamosa_current_mount_point_temporary_windows'] = array(
    '#type' => 'textfield',
    '#title' => t('MediaMosa temporary system path windows'),
    '#description' => t('An existing local file system path for storing MediaMosa related files for Windows OS based servers. It should be writable by MediaMosa. (use UNC path like \\\\server\\share\\file_path).'),
    '#required' => FALSE,
    '#default_value' => mediamosa::variable_get('mediamosa_current_mount_point_temporary_windows', '\\data\transcode'),
  );

  $form['settings_storage']['transition'] = array(
    '#type' => 'fieldset',
    '#title' => t('Temporary system path'),
    '#description' => t('The transition file system path is the location where MediaMosa stores downloaded files for transcoding and still generation of external sources. The location of the transition directory must be located on an shared location and accessable to all job servers. The default location is on the shared mount point. <em>The transition location is only used when using external storage like Amazon S3.</em>'),
    '#collapsible' => TRUE,
    '#collapsed' => FALSE,
  );

  $form['settings_storage']['transition']['mediamosa_current_mount_point_transition'] = array(
    '#type' => 'textfield',
    '#title' => t('MediaMosa transition system path'),
    '#description' => t('The linux path for transition directory. The location of the transition directory must be located on an shared location, accessable to all job servers'),
    '#required' => TRUE,
    '#default_value' => mediamosa::variable_get('mediamosa_current_mount_point_transition', '/srv/mediamosa/data/transition'),
  );

  $form['settings_storage']['transition']['mediamosa_current_mount_point_transition_windows'] = array(
    '#type' => 'textfield',
    '#title' => t('MediaMosa transition system path windows'),
    '#description' => t('An existing local file system path for storing MediaMosa related files for Windows OS based servers. It should be writable by MediaMosa. (use UNC path like \\\\server\\share\\file_path).'),
    '#required' => FALSE,
    '#default_value' => mediamosa::variable_get('mediamosa_current_mount_point_transition_windows', '\\data\transition'),
  );

  $form['settings_storage']['transition']['mediamosa_storage_transition_max_size_gb'] = array(
    '#type' => 'textfield',
    '#title' => t('MediaMosa transition maximum size (gigabytes)'),
    '#description' => t('The maximum size is not an exact size. It can and will in some cases go over the maximum size, although for a short time (few minutes). We recommend around 25gb as minimum value, for larger installations up to 100gb. The more size, the less download traffic is needed for external sources.'),
    '#required' => TRUE,
    '#default_value' => mediamosa::variable_get('mediamosa_storage_transition_max_size_gb', '50'),
  );

  $form['settings_storage']['transition']['mediamosa_storage_transition_max_lifetime_days'] = array(
    '#type' => 'textfield',
    '#title' => t('MediaMosa transition maximum lifetime files (days)'),
    '#description' => t('Files will be kept for the maximum of given days that the file was not accessed. However, files will be removed sooner if space when needed. We recommend 7 days as minimum value.'),
    '#required' => TRUE,
    '#default_value' => mediamosa::variable_get('mediamosa_storage_transition_max_lifetime_days', '14'),
  );

  $form['settings_storage']['tools'] = array(
    '#type' => 'fieldset',
    '#title' => t('Temporary tools path'),
    '#description' => t('The Tools may use a different mount point for creating temporary files. This may only be accessible locally on the job server that performs the conversion.'),
    '#collapsible' => TRUE,
    '#collapsed' => FALSE,
  );
  $form['settings_storage']['tools']['mediamosa_current_mount_point_temp_tools'] = array(
    '#type' => 'textfield',
    '#title' => t('MediaMosa temporary tools path'),
    '#description' => t('The linux path for temporary files directory for tools. This may only be accessible locally on the job server that performs the conversion.'),
    '#required' => TRUE,
    '#default_value' => mediamosa::variable_get('mediamosa_current_mount_point_temp_tools', '/srv/mediamosa/data/transcode'),
  );

  $form['settings_mediamosa'] = array(
    '#type' => 'fieldset',
    '#title' => t('Miscellaneous'),
    '#collapsible' => TRUE,
    '#collapsed' => !isset($_GET['settings_mediamosa']),
  );

  // Get all installed search engines.
  $mediamosa_search_engines = module_invoke_all('mediamosa_search_engine_info');
  $options = array();
  foreach ($mediamosa_search_engines as $name => $mediamosa_search_engine) {
    $options[$name] = $mediamosa_search_engine['title'];
  }

  $form['settings_mediamosa']['mediamosa_search_engine'] = array(
    '#type' => 'select',
    '#title' => t('Select the default search engine'),
    '#description' => t('Note: Indexing is only enabled for the select search engine. The MediaMosa default is always indexed, no matter this setting. However, any other search engine will stop getting indexed when switching to another engine. You have to re-index the search engine once you reselect it here.'),
    '#required' => TRUE,
    '#options' => $options,
    '#default_value' => variable_get('mediamosa_search_engine', 'mediamosa_search'),
  );

  $form['settings_mediamosa']['mediamosa_version'] = array(
    '#type' => 'select',
    '#title' => t('Select MediaMosa version REST output'),
    '#description' => t('Select the version for the REST calls output format. Use this setting for compatiblitity problems with the output.'),
    '#options' => mediamosa_rest::get_all_versions(t('Current version')),
    '#default_value' => variable_get('mediamosa_version', mediamosa_version::LATEST),
  );

  $form['settings_mediamosa']['mediamosa_cron_url_app'] = array(
    '#type' => 'textfield',
    '#title' => t('URL REST for CRON runs'),
    '#description' => t('The URL or IP Address of the server to apply the call for CRON REST calls. For now its used to trigger update for the status page and where to run the status tests. Also external modules, like Solr module, will use this server. This must be a MediaMosa REST interface or the admin URL (default http://localhost/), and open from this server, f.e. \'http://app.mediamosa.local\'. <br />Notes: <br /><em>Make sure you only trigger the CRON on one server, prefer where you host the admin interface.</em><br /><em>You must use http:// or other schema in this URL.</em>'),
    '#required' => TRUE,
    '#default_value' => variable_get('mediamosa_cron_url_app', 'http://localhost'),
  );

  $form['settings_mediamosa']['mediamosa_cron_url_app_local'] = array(
    '#type' => 'checkbox',
    '#title' => t('Use localhost with hostname'),
    '#description' => t('Enable to use localhost and provide the call with the hostname. This option is useful when your server does not allow to call the host directy on localhost by hostname. Enabled will call localhost with the hostname in the HTTP header, allowing the call to go directly to localhost instead of going outside and back in. <b>Use only when this URL is on the same server where CRON is running. If you are not sure, then keep this setting unchecked.</b>'),
    '#default_value' => variable_get('mediamosa_cron_url_app_local', ''),
  );

  // Admin only.
  if (user_access(mediamosa_permission::ADMIN_MEDIAMOSA)) {
    $form['settings_mediamosa']['mediamosa_internal_password'] = array(
      '#type' => 'textfield',
      '#title' => t('Password used for internal REST calls'),
      '#description' => t('This password allows usage of the internal REST calls. The password is autogenerated and should not be changed.'),
      '#default_value' => mediamosa::get_internal_password(),
      '#required' => FALSE,
    );
    $form['settings_mediamosa']['mediamosa_deny_anonymous'] = array(
      '#type' => 'checkbox',
      '#title' => t('Deny all access to administration for anonymous users (user with anonymous role only or user that not logged into Drupal).'),
      '#description' => t('You must deny anonomous access to protect read access on your (MediaMosa) nodes. You will deny Drupal user to login onto the MediaMosa administration when they either have the anonymous role or are not logged in.'),
      '#default_value' => mediamosa::deny_anonymous(),
      '#required' => TRUE,
    );
  }
  return $form;
}

/**
 * Implements hook_mediamosa_configuration_validate().
 */
function mediamosa_mediamosa_configuration_validate($form, $form_state) {

  // Use normal so schema might be empty.
  $parse_url = parse_url($form_state['values']['mediamosa_cron_url_app']);
  if (!isset($parse_url['scheme']) || !in_array($parse_url['scheme'], array('http', 'https'))) {
    form_set_error('mediamosa_cron_url_app', t("Include either 'http:// or 'https://' in URL Rest."));
  }

  // Get the path based on OS.
  $path = mediamosa::is_windows_platform() ? $form_state['values']['mediamosa_current_mount_point_windows'] : $form_state['values']['mediamosa_current_mount_point'];
  if (!empty($path) && !mediamosa_io::is_writable($path)) {
    drupal_set_message(t('<em>Warning, your !os MediaMosa storage file system path is not writable.</em>', array('!os' => mediamosa::is_windows_platform() ? 'Windows' : 'Linux')), 'warning');
  }

  $wrapper_local = new mediamosa_io_streamwrapper_local();
  $wrapper_local_stills = new mediamosa_io_streamwrapper_local_stills();
  $wrapper_local_temporary = new mediamosa_io_streamwrapper_local_temporary();
  $wrapper_local_transition = new mediamosa_io_streamwrapper_local_transition();
  if (
    $wrapper_local->get_storage_path_linux() != $form_state['values']['mediamosa_current_mount_point'] ||
    $wrapper_local->get_storage_path_windows() != $form_state['values']['mediamosa_current_mount_point_windows'] ||
    $wrapper_local_stills->get_storage_path_linux() != $form_state['values']['mediamosa_current_mount_point_stills'] ||
    $wrapper_local_stills->get_storage_path_windows() != $form_state['values']['mediamosa_current_mount_point_stills_windows'] ||
    $wrapper_local_temporary->get_storage_path_linux() != $form_state['values']['mediamosa_current_mount_point_temporary'] ||
    $wrapper_local_temporary->get_storage_path_windows() != $form_state['values']['mediamosa_current_mount_point_temporary_windows'] ||
    $wrapper_local_transition->get_storage_path_linux() != $form_state['values']['mediamosa_current_mount_point_transition'] ||
    $wrapper_local_transition->get_storage_path_windows() != $form_state['values']['mediamosa_current_mount_point_transition_windows']
  ) {
    // Get the running jobs.
    $running_jobs = mediamosa_job::has_running_jobs();

    // Check if any jobs are running.
    if ($running_jobs) {
      form_set_error('mediamosa_current_mount_point', t('You can not change any of the file system settings if there are running jobs. There are currently @count running job(s).', array('@count' => $running_jobs)));
    }
  }

  // Must not be lower than 1.
  if ($form_state['values']['mediamosa_storage_transition_max_lifetime_days'] < 1) {
    form_set_error('mediamosa_storage_transition_max_lifetime_days', t('Must be larger than 0'));
  }

  if ($form_state['values']['mediamosa_storage_transition_max_size_gb'] < 10) {
    form_set_error('mediamosa_storage_transition_max_size_gb', t('Must be larger or equal than 10'));
  }
}

/**
 * Implements hook_form_alter().
 */
function mediamosa_form_alter(&$form, &$form_state, $form_id) {
  if ($form_id == 'dblog_filter_form') {

    // Extend the watchdog filter.
    if (!empty($_SESSION['mediamosa_watchdog_overview_filter'])) {
      $form['filters']['#collapsed'] = FALSE;
    }
    $form['filters']['mediamosa'] = array(
      '#prefix' => '<div id="mediamosa-dblog-filters">',
      '#suffix' => '</div>',
    );
    $form['filters']['mediamosa']['asset_id'] = array(
      '#type' => 'textfield',
      '#title' => t('Asset ID'),
      '#size' => 32,
      '#maxlength' => 32,
      '#required' => FALSE,
      '#default_value' => empty($_SESSION['mediamosa_watchdog_overview_filter']['asset_id']) ? '' : $_SESSION['mediamosa_watchdog_overview_filter']['asset_id'],
    );
    $form['filters']['mediamosa']['mediafile_id'] = array(
      '#type' => 'textfield',
      '#title' => t('Mediafile ID'),
      '#size' => 32,
      '#maxlength' => 32,
      '#required' => FALSE,
      '#default_value' => empty($_SESSION['mediamosa_watchdog_overview_filter']['mediafile_id']) ? '' : $_SESSION['mediamosa_watchdog_overview_filter']['mediafile_id'],
    );
    $form['filters']['mediamosa']['free_search'] = array(
      '#type' => 'textfield',
      '#title' => t('Free text search'),
      '#size' => 50,
      '#maxlength' => 100,
      '#required' => FALSE,
      '#default_value' => empty($_SESSION['mediamosa_watchdog_overview_filter']['free_search']) ? '' : $_SESSION['mediamosa_watchdog_overview_filter']['free_search'],
    );
    unset($form['#validate']);
    $form['#submit'][] = '_mediamosa_watchdog_filter_form_submit';
  }
}

/**
 * Submit of the watchdog filter form.
 */
function _mediamosa_watchdog_filter_form_submit($form, &$form_state) {

  $op = $form_state['values']['op'];
  switch ($op) {
    case t('Filter'):
      $_SESSION['mediamosa_watchdog_overview_filter']['asset_id'] = $form_state['values']['asset_id'];
      $_SESSION['mediamosa_watchdog_overview_filter']['mediafile_id'] = $form_state['values']['mediafile_id'];
      $_SESSION['mediamosa_watchdog_overview_filter']['free_search'] = $form_state['values']['free_search'];
      break;

    case t('Reset'):
      $_SESSION['mediamosa_watchdog_overview_filter'] = array();
      break;
  }
}

/**
 * Implements hook_query_alter().
 *
 * Alter the search query on watchdog so we can search within the watchdog.
 *
 * @var QueryAlterableInterface $query
 *  The watchdog query object.
 */
function mediamosa_query_alter(QueryAlterableInterface $query) {

  $tables = $query->getTables();
  foreach ($tables as $table) {
    if ($table['table'] == 'watchdog') {
      if (!empty($_SESSION['mediamosa_watchdog_overview_filter']['free_search'])) {
        $free_search = $_SESSION['mediamosa_watchdog_overview_filter']['free_search'];
        $or = db_or()
          ->condition('message', '%' . mediamosa_db::db_like($free_search) . '%', 'LIKE')
          ->condition('variables', '%' . mediamosa_db::db_like($free_search) . '%', 'LIKE');
        $query->condition($or);
      }
      if (!empty($_SESSION['mediamosa_watchdog_overview_filter']['asset_id']) || !empty($_SESSION['mediamosa_watchdog_overview_filter']['mediafile_id'])) {
        $query->join(mediamosa_watchdog_db::TABLE_NAME, 'mw', 'w.wid = mw.wid');
        if (!empty($_SESSION['mediamosa_watchdog_overview_filter']['asset_id'])) {
          $query->condition(mediamosa_watchdog_db::ASSET_ID, '%' . mediamosa_db::db_like($_SESSION['mediamosa_watchdog_overview_filter']['asset_id']) . '%', 'LIKE');
        }
        if (!empty($_SESSION['mediamosa_watchdog_overview_filter']['mediafile_id'])) {
          $query->condition(mediamosa_watchdog_db::MEDIAFILE_ID, '%' . mediamosa_db::db_like($_SESSION['mediamosa_watchdog_overview_filter']['mediafile_id']) . '%', 'LIKE');
        }
      }
    }
  }
}

/**
 * Implements hook_cron().
 */
function mediamosa_cron() {

  // No need to clean up watchdog inside simpletest.
  if (mediamosa::in_simpletest_sandbox()) {
    return;
  }

  // Call the clear up function of transition files.
  mediamosa_storage_transition::clean_up();

  try {
    /*
     * Clean up our extra data on watchdog entries in mediamosa_watchdog.
     */
    $query = mediamosa_db::db_select('watchdog', 'w')
      ->fields('w', array('wid'))
      ->orderBy('wid', 'ASC')
      ->range(0, 1);
    $result = $query->execute();
    $lowest_wid = $result->fetchField();

    mediamosa_db::db_delete(mediamosa_watchdog_db::TABLE_NAME)
      ->condition('wid', $lowest_wid, '<')
      ->execute();
  }
  catch (Exception $e) {
    mediamosa_watchdog::log('Catch exception during cron: mediamosa_cron(): @msg', array('@msg' => $e->getMessage()));
  }
}

/**
 * Implements hook_mediamosa_search_engine_info().
 */
function mediamosa_mediamosa_search_engine_info() {

  // Return the information about the default search engine.
  return array(
    'mediamosa_search' => array(
      'title' => t('MediaMosa default search'),
      'description' => t('The default search engine for searching in MediaMosa. This search engine is always available.'),
    ),
  );
}

/**
 * Implements hook_file_mimetype_mapping_alter().
 */
function mediamosa_file_mimetype_mapping_alter(&$mapping) {
  if (array_search('video/webm', $mapping['mimetypes']) === FALSE) {
    // Add missing mimetypes.
    $mapping['mimetypes'][] = 'video/webm';
    $mapping['mimetypes'][] = 'audio/webm';
  }

  // Webm.
  $webm = array_search('video/webm', $mapping['mimetypes']);

  // Check if video/webm is already added.
  $mapping['extensions']['webm'] = $webm;
}

/**
 * Implements hook_mediamosa_storage_profile_view().
 *
 * Needs to appear being mediamosa_storage_local.
 */
function mediamosa_storage_local_mediamosa_storage_profile_view($node, $view_mode = 'full') {
  $wrapper = new mediamosa_io_streamwrapper_local();
  $rows = array(
    array(t('Linux Mount Point'), check_plain($wrapper->get_storage_path_linux())),
    array(t('Windows Mount Point'), check_plain($wrapper->get_storage_path_windows())),
  );
  return $rows;
}

/**
 * Implements hook_mediafile_metadata_properties().
 */
function mediamosa_mediafile_metadata_properties() {
  return array(
    'custom-width-height-fps' => array(
      'title' => 'Width * Height @ fps',
    ),
    mediamosa_asset_mediafile_metadata::FILE_DURATION => array(
      'title' => 'Duration',
    ),
    mediamosa_asset_mediafile_metadata::MIME_TYPE => array(
      'title' => 'Mime Type',
      'index' => TRUE,
    ),
    'custom-video-information' => array(
      'title' => 'Video information',
    ),
    'custom-audio-information' => array(
      'title' => 'Audio information',
    ),
    mediamosa_asset_mediafile_metadata::MD5 => array(
      'title' => 'MD5',
      'index' => TRUE,
    ),
    'custom-container' => array(
      'title' => 'Container',
    ),
    mediamosa_asset_mediafile_metadata::FILESIZE => array(
      'title' => 'Filesize',
      'index' => TRUE,
      'type' => mediamosa_asset_mediafile_metadata_db::VAL_INT,
    ),
    mediamosa_asset_mediafile_metadata::IS_HINTED => array(
      'title' => 'MP4 hinted',
    ),
    mediamosa_asset_mediafile_metadata::IS_INSERTED_MD => array(
      'title' => 'FLV metadated',
    ),
  );
}

/**
 * Implements hook_mediafile_metadata_property_show_NAME().
 */
function mediamosa_mediafile_metadata_property_show_custom_container($metadata) {
  if (!isset($metadata[mediamosa_asset_mediafile_metadata::CONTAINER_TYPE]) || $metadata[mediamosa_asset_mediafile_metadata::CONTAINER_TYPE] === '') {
    return '';
  }
  if (!isset($metadata[mediamosa_asset_mediafile_metadata::BITRATE]) || $metadata[mediamosa_asset_mediafile_metadata::BITRATE] === '') {
    return $metadata[mediamosa_asset_mediafile_metadata::CONTAINER_TYPE];
  }

  return strtr(
    '!{container_type} @ !{bitrate}kbps',
    array(
      '!{container_type}' => $metadata[mediamosa_asset_mediafile_metadata::CONTAINER_TYPE],
      '!{bitrate}' => $metadata[mediamosa_asset_mediafile_metadata::BITRATE],
    )
  );
}

/**
 * Implements hook_mediafile_metadata_property_show_NAME().
 */
function mediamosa_mediafile_metadata_property_show_custom_width_height_fps($metadata) {

  if (empty($metadata[mediamosa_asset_mediafile_metadata::WIDTH])) {
    return '';
  }

  return strtr(
    '!{width}x!{height}px @ !{fps}fps',
    array(
      '!{width}' => $metadata[mediamosa_asset_mediafile_metadata::WIDTH],
      '!{height}' => $metadata[mediamosa_asset_mediafile_metadata::HEIGHT],
      '!{fps}' => empty($metadata[mediamosa_asset_mediafile_metadata::FPS]) ? 0 : $metadata[mediamosa_asset_mediafile_metadata::FPS],
    )
  );
}

/**
 * Implements hook_mediafile_metadata_property_show_NAME().
 */
function mediamosa_mediafile_metadata_property_show_custom_video_information($metadata) {
  if (!isset($metadata[mediamosa_asset_mediafile_metadata::VIDEO_CODEC]) || $metadata[mediamosa_asset_mediafile_metadata::VIDEO_CODEC] === '') {
    return '';
  }

  return strtr(
    '!{video_codec} @ !{bitrate}kbps @ !{colorspace}',
    array(
      '!{video_codec}' => $metadata[mediamosa_asset_mediafile_metadata::VIDEO_CODEC],
      '!{bitrate}' => $metadata[mediamosa_asset_mediafile_metadata::BITRATE],
      '!{colorspace}' => $metadata[mediamosa_asset_mediafile_metadata::COLORSPACE],
    )
  );
}

/**
 * Implements hook_mediafile_metadata_property_show_NAME().
 */
function mediamosa_mediafile_metadata_property_show_custom_audio_information($metadata) {
  if (!isset($metadata[mediamosa_asset_mediafile_metadata::AUDIO_CODEC]) || $metadata[mediamosa_asset_mediafile_metadata::AUDIO_CODEC] === '') {
    return;
  }

  return strtr(
    '!{audio_codec} @ !{sample_rate}Hz (!{channels})',
    array(
      '!{audio_codec}' => $metadata[mediamosa_asset_mediafile_metadata::AUDIO_CODEC],
      '!{sample_rate}' => $metadata[mediamosa_asset_mediafile_metadata::SAMPLE_RATE],
      '!{channels}' => empty($metadata[mediamosa_asset_mediafile_metadata::CHANNELS]) ? 0 : $metadata[mediamosa_asset_mediafile_metadata::CHANNELS],
    )
  );
}

/**
 * Implements hook_mediafile_metadata_property_show_NAME().
 */
function mediamosa_mediafile_metadata_property_show_filesize($metadata) {
  return empty($metadata[mediamosa_asset_mediafile_metadata::FILESIZE]) ? '' : format_size($metadata[mediamosa_asset_mediafile_metadata::FILESIZE]);
}
